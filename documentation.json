{
    "pipes": [],
    "interfaces": [
        {
            "name": "AuthModel",
            "id": "interface-AuthModel-833982803cbf6081822fd950430c6bbd",
            "file": "projects/aps/src/app/core/domain/auth.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AuthModel {\n  correo: string;\n  password: string;\n  recaptchaReactive: string;\n}\n",
            "properties": [
                {
                    "name": "correo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "recaptchaReactive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "ConfigLayout",
            "id": "interface-ConfigLayout-a238a6b6670da4652c737970ed66c86f",
            "file": "projects/aps/src/app/config/interfaces/config-layout.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ConfigLayout {\n  header: {\n    hidden: boolean;\n  };\n  menu: {\n    hidden: boolean;\n  };\n}\n",
            "properties": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "CovidModel",
            "id": "interface-CovidModel-ca897a23021dbd18cbadf166d15bda2b",
            "file": "projects/aps/src/app/dashboard/domain/covid.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CovidModel {\n  provinceState?: string;\n  countryRegion: string;\n  lastUpdate: number;\n  lat?: number;\n  long?: number;\n  confirmed: number;\n  deaths: number;\n  recovered: any;\n  active: any;\n  admin2?: string;\n  fips?: string;\n  combinedKey: string;\n  incidentRate?: number;\n  peopleTested: any;\n  peopleHospitalized: any;\n  uid: number;\n  iso3?: string;\n  cases28Days?: number;\n  deaths28Days?: number;\n  iso2?: string;\n}\n",
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "admin2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "cases28Days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "combinedKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "confirmed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "countryRegion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "deaths",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "deaths28Days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "fips",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "incidentRate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "iso2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "iso3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "lastUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "lat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "long",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "peopleHospitalized",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "peopleTested",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "provinceState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "recovered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "uid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "DriverInterface",
            "id": "interface-DriverInterface-e5675f3b30627419ff6ae8c218e4e2ee",
            "file": "projects/aps/src/app/drivers/application/driver.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { UseCase } from '../../shared/interfaces/usecase.interface';\nimport { DriverModel } from '../domain/driver.model';\n\nexport interface DriverInterface extends UseCase<DriverModel> {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "UseCase"
        },
        {
            "name": "DriverModel",
            "id": "interface-DriverModel-652e8904e304c2a4835c1faaf19333c4",
            "file": "projects/aps/src/app/drivers/domain/driver.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DriverModel {\n  id: number;\n  nombre: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "DtoExport",
            "id": "interface-DtoExport-e9924b9218bd65c953260306ef9445eb",
            "file": "projects/aps/src/app/shared/interfaces/dto-export.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DtoExport<T, U> {\n  mapping(data: T[]): U[];\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 166,
            "methods": [
                {
                    "name": "mapping",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "U[]",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Entity",
            "id": "interface-Entity-c82ad5e6f96517431e4a900dad997475",
            "file": "projects/aps/src/app/dashboard/domain/entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Entity {\n  name: string;\n  value: number;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "HistoryModel",
            "id": "interface-HistoryModel-16366755287e9eeb779a8a68599608ca",
            "file": "projects/aps/src/app/histories/domain/history.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface HistoryModel {\n  id: number;\n  contratante: string;\n  requerido: string;\n  poliza: string;\n  dni: string;\n  nombre: string;\n  apellido: string;\n  telefono: string;\n  edad: number;\n  sexo: number;\n  diagnostico: string;\n  sintomas: string;\n  tratamiento: string;\n  activo: boolean;\n  medico: any;\n}\n",
            "properties": [
                {
                    "name": "activo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "apellido",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "contratante",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "diagnostico",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "dni",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "edad",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "medico",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "poliza",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "requerido",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "sexo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "sintomas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "telefono",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "tratamiento",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IData",
            "id": "interface-IData-33b98bc965987b8e8e3752d4ca492240",
            "file": "projects/aps/src/app/shared/components/table/table.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  ContentChildren,\n  Input,\n  OnInit,\n  QueryList,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { MatColumnDef, MatTable } from '@angular/material/table';\nimport { MetaDataColumn } from '../../interfaces/metacolumn.interface';\n\ninterface IData {\n  id: number;\n  name: string;\n}\n\n@Component({\n  selector: 'aps-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.css'],\n})\nexport class TableComponent implements OnInit {\n  @Input() data: any;\n  @Input() metaDataColumns!: MetaDataColumn[];\n  listFields: string[] = [];\n  @ContentChildren(MatColumnDef, { descendants: true })\n  columnsDef!: QueryList<MatColumnDef>;\n  @ViewChild(MatTable, { static: true }) table!: MatTable<any>;\n\n  constructor() {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.metaDataColumns) {\n      this.listFields = this.metaDataColumns.map((x) => x.field);\n    }\n  }\n\n  ngOnInit(): void {}\n\n  ngAfterContentInit() {\n    if (!this.columnsDef) {\n      return;\n    }\n    this.columnsDef.forEach((columnDef) => {\n      this.listFields.push(columnDef.name);\n      this.table?.addColumnDef(columnDef);\n    });\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IDtoExportDriver",
            "id": "interface-IDtoExportDriver-004920fcd3b13d50299e8be86c42d71b",
            "file": "projects/aps/src/app/drivers/dtos/driver-export.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DtoExport } from '../../shared/interfaces/dto-export.interface';\nimport { DriverModel } from '../domain/driver.model';\n\nexport interface IDtoExportDriver {\n  'Nombre del piloto': string;\n}\n\nexport class DriverExportDto\n  implements DtoExport<DriverModel, IDtoExportDriver>\n{\n  mapping(data: DriverModel[]): IDtoExportDriver[] {\n    return data.map((driver: DriverModel) => ({\n      'Nombre del piloto': driver.nombre,\n    }));\n  }\n}\n",
            "properties": [
                {
                    "name": "Nombre del piloto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IDtoExportMedic",
            "id": "interface-IDtoExportMedic-c92f8feb79f61908598e0a46daf94983",
            "file": "projects/aps/src/app/medics/dtos/medic-export.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DtoExport } from '../../shared/interfaces/dto-export.interface';\nimport { MedicModel } from '../domain/medic.model';\n\nexport interface IDtoExportMedic {\n  'Nombre del usuario': string;\n  'Correo electrónico': string;\n}\n\nexport class MedicExportDto implements DtoExport<MedicModel, IDtoExportMedic> {\n  mapping(data: MedicModel[]): IDtoExportMedic[] {\n    return data.map((medic: MedicModel) => ({\n      'Nombre del usuario': medic.nombre,\n      'Correo electrónico': medic.correo,\n      CMP: medic.cmp,\n    }));\n  }\n}\n",
            "properties": [
                {
                    "name": "Correo electrónico",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "Nombre del usuario",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IDtoExportUser",
            "id": "interface-IDtoExportUser-31a8aa5b590d2d5d09a3686941a7fa71",
            "file": "projects/aps/src/app/users/dtos/user-export.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DtoExport } from '../../shared/interfaces/dto-export.interface';\nimport { UserModel } from '../domain/user.model';\n\nexport interface IDtoExportUser {\n  'Nombre del usuario': string;\n  'Correo electrónico': string;\n}\n\nexport class UserExportDto implements DtoExport<UserModel, IDtoExportUser> {\n  mapping(data: UserModel[]): IDtoExportUser[] {\n    return data.map((user: UserModel) => ({\n      'Nombre del usuario': user.nombre,\n      'Correo electrónico': user.correo,\n    }));\n  }\n}\n",
            "properties": [
                {
                    "name": "Correo electrónico",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "Nombre del usuario",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IIcon",
            "id": "interface-IIcon-b6986f48938b146d820f0027dc93a08d",
            "file": "projects/aps/src/app/helpers/services/icon.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\n\ninterface IIcon {\n  name: string;\n  path: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconService {\n  private listIcons: IIcon[] = [\n    { name: 'logo', path: '../assets/icons/apsulancia.svg' },\n    { name: 'medico', path: '../assets/icons/medico.svg' },\n    { name: 'enfermero', path: '../assets/icons/enfermero.svg' },\n    { name: 'historia', path: '../assets/icons/historia.svg' },\n    { name: 'piloto', path: '../assets/icons/conductor.svg' },\n    { name: 'usuario', path: '../assets/icons/programador.svg' },\n    { name: 'reporte', path: '../assets/icons/reporte.svg' },\n    { name: 'tarifa', path: '../assets/icons/tarifa.svg' },\n    { name: 'tablero', path: '../assets/icons/tablero.svg' },\n    { name: 'monitoreo', path: '../assets/icons/monitoreo.svg' },\n  ];\n\n  constructor(\n    private matIconRegistry: MatIconRegistry,\n    private domSanitizer: DomSanitizer\n  ) {\n    this.registryIcons();\n  }\n\n  registryIcons() {\n    this.listIcons.forEach((icon) => {\n      this.matIconRegistry.addSvgIcon(\n        icon.name,\n        this.domSanitizer.bypassSecurityTrustResourceUrl(icon.path)\n      );\n    });\n  }\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IMenu",
            "id": "interface-IMenu-7fb33e8355ba8b3f621384a111e5cd1d",
            "file": "projects/aps/src/app/helpers/services/menu.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nexport interface IMenu {\n  title: string;\n  url: string;\n  icon: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MenuService {\n  private listMenu: IMenu[] = [\n    { title: 'Dashboard', url: '/dashboard', icon: 'tablero' },\n    { title: 'Historias', url: '/histories', icon: 'historia' },\n    { title: 'Medicos', url: '/medics', icon: 'medico' },\n    { title: 'Pilotos', url: '/drivers', icon: 'piloto' },\n    { title: 'Usuarios', url: '/users', icon: 'usuario' },\n  ];\n  constructor() {}\n\n  getMenu(): IMenu[] {\n    return [...this.listMenu];\n  }\n\n  getMenuByUrl(url: string): IMenu {\n    return this.listMenu.find(\n      (menu) => menu.url.toLowerCase() === url.toLowerCase()\n    ) as IMenu;\n  }\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IPayload",
            "id": "interface-IPayload-8c8e3af6a8afa4a4b5fcb108c191706b",
            "file": "projects/aps/src/app/core/infraestructure/storage.infraestructure.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { StorageRepository } from '../application/storage.repository';\nimport jwt_decode from 'jwt-decode';\n\ninterface IPayload {\n  iat: number;\n  exp: number;\n  name: string;\n  email: string;\n  roles: string[];\n}\n\nexport class StorageInfraestructure extends StorageRepository {\n  setStorage(nameProperty: string, value: string): void {\n    sessionStorage.setItem(nameProperty, value);\n  }\n  getStorage(nameProperty: string): string | null {\n    return sessionStorage.getItem(nameProperty);\n  }\n  clear(): void {\n    sessionStorage.clear();\n  }\n  getFieldInToken(fieldName: string) {\n    const accessToken = this.getStorage('accessToken');\n\n    if (!accessToken) {\n      return null;\n    }\n    try {\n      const payload: any = jwt_decode(accessToken) as IPayload;\n      return payload[fieldName];\n    } catch (error) {}\n  }\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "exp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "iat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "KeyPadButton",
            "id": "interface-KeyPadButton-9b94094c036c0cfcba25c67dd0ff1abc",
            "file": "projects/aps/src/app/shared/interfaces/keybutton.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface KeyPadButton {\n  icon: string;\n  color: string;\n  tooltip: string;\n  action: string;\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "MedicModel",
            "id": "interface-MedicModel-15b2c98e4872f7dc2f3e5ca7c54f048d",
            "file": "projects/aps/src/app/medics/domain/medic.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MedicModel {\n  id: number;\n  nombre: string;\n  segundo_nombre: string;\n  apellido: string;\n  cmp: string;\n  dni: string;\n  correo: string;\n  activo: boolean;\n  foto: string;\n}\n",
            "properties": [
                {
                    "name": "activo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "apellido",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "cmp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "correo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "dni",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "foto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "segundo_nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "MetaDataColumn",
            "id": "interface-MetaDataColumn-dff8fadd7516b60f3e1a9b19d2ddbd8d",
            "file": "projects/cdev-table/src/lib/metacolumn.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MetaDataColumn {\n  field: string;\n  title: string;\n}\n",
            "properties": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "MetaDataColumn",
            "id": "interface-MetaDataColumn-dff8fadd7516b60f3e1a9b19d2ddbd8d-1",
            "file": "projects/aps/src/app/shared/interfaces/metacolumn.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MetaDataColumn {\n  field: string;\n  title: string;\n}\n",
            "properties": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "MetaDataColumn-1"
        },
        {
            "name": "OptionsExport",
            "id": "interface-OptionsExport-4affd78a6c8405fec2b7133e65839114",
            "file": "projects/aps/src/app/shared/interfaces/option-export.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DtoExport } from './dto-export.interface';\n\nexport interface OptionsExport<T, U> {\n  title: string;\n  fileName: string;\n  content: T[];\n  dto: DtoExport<T, U>;\n}\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "dto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DtoExport<T | U>",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "fileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "Page",
            "id": "interface-Page-afc040eb6bfcb492ac271ac649e80ca9",
            "file": "projects/aps/src/app/shared/interfaces/page.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Page<T> {\n  records: T[];\n  totalRecords: number;\n}\n",
            "properties": [
                {
                    "name": "records",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "totalRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "Tokens",
            "id": "interface-Tokens-3f5020689b9846360ea86553d59fcdd4",
            "file": "projects/aps/src/app/helpers/interfaces/tokens.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Tokens {\n  accessToken: string;\n  refreshToken: string;\n}\n",
            "properties": [
                {
                    "name": "accessToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "UseCase",
            "id": "interface-UseCase-24958f45372d471269d918b6144507da",
            "file": "projects/aps/src/app/shared/interfaces/usecase.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { Page } from './page.interface';\n\nexport interface UseCase<T> {\n  getByPage(page: number): Observable<Page<T>>;\n  delete(id: number): Observable<T>;\n  list(): Observable<T[]>;\n  update(id: number, user: Partial<T>): Observable<T>;\n  insert(user: Partial<T>): Observable<T>;\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 166,
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<T>>",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "user",
                            "type": "Partial<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "Partial<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "user",
                            "type": "Partial<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "Partial<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "UserModel",
            "id": "interface-UserModel-c98d9f6c40a5be596be8caca75527595",
            "file": "projects/aps/src/app/users/domain/user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserModel {\n  id: number;\n  nombre: string;\n  correo: string;\n  password: string;\n  refreshToken: string;\n  activo: boolean;\n  roles: any;\n}\n",
            "properties": [
                {
                    "name": "activo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "correo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthInfraestructure",
            "id": "injectable-AuthInfraestructure-72f88c2dad74bf4a62e91ded582e573e",
            "file": "projects/aps/src/app/core/infraestructure/auth.infraestructure.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getNewAccessToken",
                    "args": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Tokens>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AuthRepository"
                    }
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "auth",
                            "type": "AuthModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Tokens>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "auth",
                            "type": "AuthModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AuthRepository"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'projects/aps/src/environments/environment';\nimport { AuthRepository } from '../application/auth.repository';\nimport { AuthModel } from '../domain/auth.model';\nimport { Observable } from 'rxjs';\nimport { Tokens } from '../../helpers/interfaces/tokens';\n\n@Injectable()\nexport class AuthInfraestructure extends AuthRepository {\n  constructor(private http: HttpClient) {\n    super();\n  }\n  login(auth: AuthModel): Observable<Tokens> {\n    return this.http.post<Tokens>(`${environment.API_URL}/users/login`, auth);\n  }\n\n  getNewAccessToken(refreshToken: string): Observable<Tokens> {\n    return this.http.get<Tokens>(\n      `${environment.API_URL}/users/refresh/${refreshToken}`\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "AuthRepository",
            "type": "injectable"
        },
        {
            "name": "AuthUseCase",
            "id": "injectable-AuthUseCase-9e2f439b92d66579c5a1503d3640a63a",
            "file": "projects/aps/src/app/core/application/auth.usecase.ts",
            "properties": [
                {
                    "name": "userLogged",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getFieldValue",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewAccessToken",
                    "args": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Tokens>",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRoles",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isAuthorized",
                    "args": [
                        {
                            "name": "rolesAllowed",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rolesAllowed",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "auth",
                            "type": "AuthModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "auth",
                            "type": "AuthModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setFieldValue",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Tokens } from '../../helpers/interfaces/tokens';\nimport { AuthModel } from '../domain/auth.model';\nimport { AuthRepository } from './auth.repository';\nimport { StorageRepository } from './storage.repository';\nimport jwt_decode from 'jwt-decode';\nimport { Observable, of } from 'rxjs';\n\n@Injectable()\nexport class AuthUseCase {\n  private userLogged = false;\n\n  constructor(\n    private repository: AuthRepository,\n    private router: Router,\n    private storage: StorageRepository\n  ) {}\n\n  login(auth: AuthModel) {\n    return this.repository.login(auth).subscribe((response: Tokens) => {\n      this.storage.setStorage('accessToken', response.accessToken);\n      this.storage.setStorage('refreshToken', response.refreshToken);\n      this.userLogged = true;\n      this.router.navigate(['/dashboard']);\n    });\n  }\n\n  logout(): Observable<any> {\n    this.storage.clear();\n    this.userLogged = false;\n    this.router.navigate(['/login']);\n    return of();\n  }\n\n  isAuthenticated(): boolean {\n    return this.userLogged || !!this.storage.getStorage('accessToken');\n  }\n\n  isAuthorized(rolesAllowed: string[]): boolean {\n    const rolesUser = this.storage.getFieldInToken('roles');\n\n    let hasRoleAllowed = false;\n    for (let ind = 0; ind < rolesAllowed.length; ind++) {\n      if (rolesUser.includes(rolesAllowed[ind])) {\n        hasRoleAllowed = true;\n        break;\n      }\n    }\n\n    return hasRoleAllowed;\n  }\n\n  get accessToken(): string {\n    return '' + this.storage.getStorage('accessToken');\n  }\n\n  getNewAccessToken(refreshToken: string): Observable<Tokens> {\n    return this.repository.getNewAccessToken(refreshToken);\n  }\n\n  getFieldValue(field: string): string {\n    return '' + this.storage.getStorage(field);\n  }\n\n  setFieldValue(field: string, value: string) {\n    this.storage.setStorage(field, value);\n  }\n\n  getRoles() {\n    return this.storage.getFieldInToken('roles');\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "repository",
                        "type": "AuthRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storage",
                        "type": "StorageRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "repository",
                        "type": "AuthRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storage",
                        "type": "StorageRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "accessToken": {
                    "name": "accessToken",
                    "getSignature": {
                        "name": "accessToken",
                        "type": "string",
                        "returnType": "string",
                        "line": 54
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "ConfigService",
            "id": "injectable-ConfigService-948445f9a92a031a0d4016e9ef86ee5b",
            "file": "projects/aps/src/app/config/services/config.service.ts",
            "properties": [
                {
                    "name": "configSubject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<ConfigLayout>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigLayout } from '../interfaces/config-layout.interface';\nimport { CONFIG_TOKEN } from '../tokens';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConfigService {\n  private configSubject: BehaviorSubject<ConfigLayout>;\n\n  constructor(@Inject(CONFIG_TOKEN) private config: ConfigLayout) {\n    this.configSubject = new BehaviorSubject<ConfigLayout>(config);\n  }\n\n  set configuration(value: any) {\n    let config = this.configSubject.getValue();\n    config = Object.assign(config, value);\n    this.configSubject.next(config);\n  }\n\n  get configuration(): Observable<ConfigLayout> {\n    return this.configSubject.asObservable();\n  }\n}\n\n/* const instancia = new ConfigService()\ninstancia.configuration = {}\n//instancia.settingConfig({})\nconst value = instancia.configuration\n//const value = instancia.gettingConfig() */\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ConfigLayout",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ConfigLayout",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "configuration": {
                    "name": "configuration",
                    "setSignature": {
                        "name": "configuration",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "configuration",
                        "type": "",
                        "returnType": "Observable<ConfigLayout>",
                        "line": 22
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "CovidInfraestructure",
            "id": "injectable-CovidInfraestructure-a2db53930e8dd2ee7a03572971ef70aa",
            "file": "projects/aps/src/app/dashboard/infraestructure/covid.infraestructure.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<CovidModel[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CovidRepository"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'projects/aps/src/environments/environment';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CovidRepository } from '../application/covid.repository';\nimport { CovidModel } from '../domain/covid.model';\n\n@Injectable()\nexport class CovidInfraestructure extends CovidRepository {\n  constructor(private http: HttpClient) {\n    super();\n  }\n\n  getAll(): Observable<CovidModel[]> {\n    return this.http\n      .get<CovidModel[]>(environment.API_COVID)\n      .pipe(map((data: CovidModel[]) => data.slice(0, 30)));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "CovidRepository",
            "type": "injectable"
        },
        {
            "name": "CovidUseCase",
            "id": "injectable-CovidUseCase-023df2305120c766b54d5181a392386f",
            "file": "projects/aps/src/app/dashboard/application/covid.usecase.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<CovidModel[]>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CovidRepository } from './covid.repository';\nimport { CovidModel } from '../domain/covid.model';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class CovidUseCase {\n  constructor(private readonly covidRepository: CovidRepository) {}\n\n  getAll(): Observable<CovidModel[]> {\n    return this.covidRepository.getAll();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "covidRepository",
                        "type": "CovidRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "covidRepository",
                        "type": "CovidRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DriverInfraestructure",
            "id": "injectable-DriverInfraestructure-44320caa4d10a89d2ed4aa823ec85852",
            "file": "projects/aps/src/app/drivers/infraestructure/driver.infraestructure.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DriverModel>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DriverRepository"
                    }
                },
                {
                    "name": "getByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<DriverModel>>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DriverRepository"
                    }
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "driver",
                            "type": "Partial<DriverModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DriverModel>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "driver",
                            "type": "Partial<DriverModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DriverRepository"
                    }
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DriverModel[]>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "DriverRepository"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "driver",
                            "type": "Partial<DriverModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DriverModel>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "driver",
                            "type": "Partial<DriverModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DriverRepository"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'projects/aps/src/environments/environment';\nimport { Observable } from 'rxjs';\nimport { Page } from '../../shared/interfaces/page.interface';\nimport { DriverRepository } from '../application/driver.repository';\nimport { DriverModel } from '../domain/driver.model';\n\n@Injectable()\nexport class DriverInfraestructure extends DriverRepository {\n  update(id: number, driver: Partial<DriverModel>): Observable<DriverModel> {\n    return this.http.put<DriverModel>(\n      `${environment.API_URL}/drivers/${id}`,\n      driver\n    );\n  }\n  constructor(private http: HttpClient) {\n    super();\n  }\n\n  getByPage(page: number): Observable<Page<DriverModel>> {\n    return this.http.get<Page<DriverModel>>(\n      `${environment.API_URL}/drivers/page/${page}/${environment.PAGE_SIZE}`\n    );\n  }\n\n  insert(driver: Partial<DriverModel>): Observable<DriverModel> {\n    return this.http.post<DriverModel>(\n      `${environment.API_URL}/drivers`,\n      driver\n    );\n  }\n\n  delete(id: number): Observable<DriverModel> {\n    return this.http.delete<DriverModel>(\n      `${environment.API_URL}/drivers/${id}`\n    );\n  }\n\n  list(): Observable<DriverModel[]> {\n    return this.http.get<DriverModel[]>(`${environment.API_URL}/drivers`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "DriverRepository",
            "type": "injectable"
        },
        {
            "name": "DriverUseCase",
            "id": "injectable-DriverUseCase-0ef5e1989d494c04498214b92b55e478",
            "file": "projects/aps/src/app/drivers/application/driver.usecase.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DriverModel>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<DriverModel>>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "driver",
                            "type": "Partial<DriverModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DriverModel>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "driver",
                            "type": "Partial<DriverModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DriverModel[]>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "driver",
                            "type": "Partial<DriverModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DriverModel>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "driver",
                            "type": "Partial<DriverModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Page } from '../../shared/interfaces/page.interface';\nimport { UseCase } from '../../shared/interfaces/usecase.interface';\nimport { DriverModel } from '../domain/driver.model';\nimport { DriverRepository } from './driver.repository';\nimport { DriverInterface } from './driver.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DriverUseCase implements DriverInterface {\n  constructor(private driver: DriverRepository) {}\n\n  getByPage(page: number): Observable<Page<DriverModel>> {\n    return this.driver.getByPage(page);\n  }\n\n  delete(id: number): Observable<DriverModel> {\n    return this.driver.delete(id);\n  }\n\n  list(): Observable<DriverModel[]> {\n    return this.driver.list();\n  }\n\n  update(id: number, driver: Partial<DriverModel>): Observable<DriverModel> {\n    return this.driver.update(id, driver);\n  }\n\n  insert(driver: Partial<DriverModel>): Observable<DriverModel> {\n    return this.driver.insert(driver);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "driver",
                        "type": "DriverRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "driver",
                        "type": "DriverRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "IconService",
            "id": "injectable-IconService-b6986f48938b146d820f0027dc93a08d",
            "file": "projects/aps/src/app/helpers/services/icon.service.ts",
            "properties": [
                {
                    "name": "listIcons",
                    "defaultValue": "[\n    { name: 'logo', path: '../assets/icons/apsulancia.svg' },\n    { name: 'medico', path: '../assets/icons/medico.svg' },\n    { name: 'enfermero', path: '../assets/icons/enfermero.svg' },\n    { name: 'historia', path: '../assets/icons/historia.svg' },\n    { name: 'piloto', path: '../assets/icons/conductor.svg' },\n    { name: 'usuario', path: '../assets/icons/programador.svg' },\n    { name: 'reporte', path: '../assets/icons/reporte.svg' },\n    { name: 'tarifa', path: '../assets/icons/tarifa.svg' },\n    { name: 'tablero', path: '../assets/icons/tablero.svg' },\n    { name: 'monitoreo', path: '../assets/icons/monitoreo.svg' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIcon[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "registryIcons",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\n\ninterface IIcon {\n  name: string;\n  path: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconService {\n  private listIcons: IIcon[] = [\n    { name: 'logo', path: '../assets/icons/apsulancia.svg' },\n    { name: 'medico', path: '../assets/icons/medico.svg' },\n    { name: 'enfermero', path: '../assets/icons/enfermero.svg' },\n    { name: 'historia', path: '../assets/icons/historia.svg' },\n    { name: 'piloto', path: '../assets/icons/conductor.svg' },\n    { name: 'usuario', path: '../assets/icons/programador.svg' },\n    { name: 'reporte', path: '../assets/icons/reporte.svg' },\n    { name: 'tarifa', path: '../assets/icons/tarifa.svg' },\n    { name: 'tablero', path: '../assets/icons/tablero.svg' },\n    { name: 'monitoreo', path: '../assets/icons/monitoreo.svg' },\n  ];\n\n  constructor(\n    private matIconRegistry: MatIconRegistry,\n    private domSanitizer: DomSanitizer\n  ) {\n    this.registryIcons();\n  }\n\n  registryIcons() {\n    this.listIcons.forEach((icon) => {\n      this.matIconRegistry.addSvgIcon(\n        icon.name,\n        this.domSanitizer.bypassSecurityTrustResourceUrl(icon.path)\n      );\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "matIconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "matIconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MedicInfraestructure",
            "id": "injectable-MedicInfraestructure-167f4a290ff08b0be9770a43e98726f1",
            "file": "projects/aps/src/app/medics/infraestructure/medic.infraestructure.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MedicModel>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "MedicRepository"
                    }
                },
                {
                    "name": "getByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<MedicModel>>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "MedicRepository"
                    }
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "medic",
                            "type": "Partial<MedicModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MedicModel>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "medic",
                            "type": "Partial<MedicModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "MedicRepository"
                    }
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<MedicModel[]>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "MedicRepository"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "medic",
                            "type": "Partial<MedicModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "medic",
                            "type": "Partial<MedicModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "MedicRepository"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'projects/aps/src/environments/environment';\nimport { Observable } from 'rxjs';\nimport { Page } from '../../shared/interfaces/page.interface';\nimport { MedicRepository } from '../application/medic.repostiory';\nimport { MedicModel } from '../domain/medic.model';\n\n@Injectable()\nexport class MedicInfraestructure extends MedicRepository {\n  constructor(private http: HttpClient) {\n    super();\n  }\n\n  getByPage(page: number): Observable<Page<MedicModel>> {\n    return this.http.get<Page<MedicModel>>(\n      `${environment.API_URL}/medics/page/${page}/${environment.PAGE_SIZE}`\n    );\n  }\n\n  insert(medic: Partial<MedicModel>): Observable<MedicModel> {\n    return this.http.post<MedicModel>(`${environment.API_URL}/medics`, medic);\n  }\n\n  delete(id: number): Observable<MedicModel> {\n    return this.http.delete<MedicModel>(`${environment.API_URL}/medics/${id}`);\n  }\n\n  list(): Observable<MedicModel[]> {\n    return this.http.get<MedicModel[]>(`${environment.API_URL}/medics`);\n  }\n\n  update(id: number, medic: Partial<MedicModel>) {\n    return this.http.put<MedicModel>(\n      `${environment.API_URL}/medics/${id}`,\n      medic\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "MedicRepository",
            "type": "injectable"
        },
        {
            "name": "MedicUseCase",
            "id": "injectable-MedicUseCase-e349a29fd1012331bddb7ec114458c2f",
            "file": "projects/aps/src/app/medics/application/medic.usecase.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<MedicModel>>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "medic",
                            "type": "Partial<MedicModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MedicModel>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "medic",
                            "type": "Partial<MedicModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "user",
                            "type": "Partial<MedicModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MedicModel>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "Partial<MedicModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MedicRepository } from './medic.repostiory';\nimport { MedicModel } from '../domain/medic.model';\nimport { Observable } from 'rxjs';\nimport { Page } from '../../shared/interfaces/page.interface';\nimport { UseCase } from '../../shared/interfaces/usecase.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MedicUseCase implements UseCase<MedicModel> {\n  constructor(private medic: MedicRepository) {}\n  update(id: number, user: Partial<MedicModel>): Observable<MedicModel> {\n    return this.medic.update(id, user);\n  }\n\n  getByPage(page: number): Observable<Page<MedicModel>> {\n    return this.medic.getByPage(page);\n  }\n\n  delete(id: number) {\n    return this.medic.delete(id);\n  }\n\n  list() {\n    return this.medic.list();\n  }\n\n  insert(medic: Partial<MedicModel>): Observable<MedicModel> {\n    return this.medic.insert(medic);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "medic",
                        "type": "MedicRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "medic",
                        "type": "MedicRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MenuService",
            "id": "injectable-MenuService-7fb33e8355ba8b3f621384a111e5cd1d",
            "file": "projects/aps/src/app/helpers/services/menu.service.ts",
            "properties": [
                {
                    "name": "listMenu",
                    "defaultValue": "[\n    { title: 'Dashboard', url: '/dashboard', icon: 'tablero' },\n    { title: 'Historias', url: '/histories', icon: 'historia' },\n    { title: 'Medicos', url: '/medics', icon: 'medico' },\n    { title: 'Pilotos', url: '/drivers', icon: 'piloto' },\n    { title: 'Usuarios', url: '/users', icon: 'usuario' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenu[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "IMenu[]",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMenuByUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IMenu",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nexport interface IMenu {\n  title: string;\n  url: string;\n  icon: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MenuService {\n  private listMenu: IMenu[] = [\n    { title: 'Dashboard', url: '/dashboard', icon: 'tablero' },\n    { title: 'Historias', url: '/histories', icon: 'historia' },\n    { title: 'Medicos', url: '/medics', icon: 'medico' },\n    { title: 'Pilotos', url: '/drivers', icon: 'piloto' },\n    { title: 'Usuarios', url: '/users', icon: 'usuario' },\n  ];\n  constructor() {}\n\n  getMenu(): IMenu[] {\n    return [...this.listMenu];\n  }\n\n  getMenuByUrl(url: string): IMenu {\n    return this.listMenu.find(\n      (menu) => menu.url.toLowerCase() === url.toLowerCase()\n    ) as IMenu;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "type": "injectable"
        },
        {
            "name": "Paginator",
            "id": "injectable-Paginator-52e4ec1f190b2d8da5a740da26d1ef96",
            "file": "projects/aps/src/app/shared/classes/paginator.ts",
            "properties": [
                {
                    "name": "firstPageLabel",
                    "defaultValue": "'Primera página'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "getRangeLabel",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "itemsPerPageLabel",
                    "defaultValue": "'Items por página:'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "lastPageLabel",
                    "defaultValue": "'Última página'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "nextPageLabel",
                    "defaultValue": "'Siguiente página'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "previousPageLabel",
                    "defaultValue": "'Página anterior'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatPaginatorIntl } from '@angular/material/paginator';\n\n@Injectable()\nexport class Paginator extends MatPaginatorIntl {\n  itemsPerPageLabel = 'Items por página:';\n  nextPageLabel = 'Siguiente página';\n  previousPageLabel = 'Página anterior';\n  firstPageLabel = 'Primera página';\n  lastPageLabel = 'Última página';\n\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length === 0 || pageSize === 0) {\n      return `0 de ${length}`;\n    }\n    length = Math.max(length, 0);\n    const startIndex = page * pageSize;\n    const endIndex =\n      startIndex < length\n        ? Math.min(startIndex + pageSize, length)\n        : startIndex + pageSize;\n    return `${startIndex + 1} - ${endIndex} de ${length}`;\n  };\n}\n",
            "extends": "MatPaginatorIntl",
            "type": "injectable"
        },
        {
            "name": "SocketInfraestructure",
            "id": "injectable-SocketInfraestructure-ac11f686501b1c2844dc37b976c50215",
            "file": "projects/aps/src/app/dashboard/infraestructure/socket.infraestructure.ts",
            "properties": [
                {
                    "name": "socket",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "listen",
                    "args": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Entity[]>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SocketRepository"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\nimport { SocketRepository } from '../application/socket.repository';\nimport { Entity } from '../domain/entity';\nimport * as io from 'socket.io-client';\nimport { environment } from 'projects/aps/src/environments/environment';\n\n@Injectable()\nexport class SocketInfraestructure extends SocketRepository {\n  socket: any;\n\n  constructor() {\n    super();\n    this.socket = io.connect(environment.SOCKET_URL);\n  }\n\n  listen(eventName: string): Observable<Entity[]> {\n    return new Observable((observer: Observer<Entity[]>) => {\n      this.socket.on(eventName, (result: Entity[]) => {\n        console.log('data', result);\n        observer.next(result);\n      });\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "extends": "SocketRepository",
            "type": "injectable"
        },
        {
            "name": "SocketUseCase",
            "id": "injectable-SocketUseCase-c91347e5374eac5c6c86d44b28d78f65",
            "file": "projects/aps/src/app/dashboard/application/socket.usecase.ts",
            "properties": [],
            "methods": [
                {
                    "name": "listen",
                    "args": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Entity[]>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Entity } from '../domain/entity';\nimport { SocketRepository } from './socket.repository';\n\n@Injectable()\nexport class SocketUseCase {\n  constructor(private socketRepository: SocketRepository) {}\n\n  listen(eventName: string): Observable<Entity[]> {\n    return this.socketRepository.listen(eventName);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socketRepository",
                        "type": "SocketRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "socketRepository",
                        "type": "SocketRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserInfraestructure",
            "id": "injectable-UserInfraestructure-42cb8117d79e854d9b5a510aab3ddcf1",
            "file": "projects/aps/src/app/users/infraestructure/user.infraestructure.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserModel>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "UserRepository"
                    }
                },
                {
                    "name": "getByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<UserModel>>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "UserRepository"
                    }
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "user",
                            "type": "Partial<UserModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserModel>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "Partial<UserModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "UserRepository"
                    }
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UserModel[]>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "UserRepository"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "user",
                            "type": "Partial<UserModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "Partial<UserModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "UserRepository"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'projects/aps/src/environments/environment';\nimport { Observable } from 'rxjs';\nimport { Page } from '../../shared/interfaces/page.interface';\nimport { UserRepository } from '../application/user.repository';\nimport { UserModel } from '../domain/user.model';\n\n@Injectable()\nexport class UserInfraestructure extends UserRepository {\n  constructor(private http: HttpClient) {\n    super();\n  }\n\n  getByPage(page: number): Observable<Page<UserModel>> {\n    return this.http.get<Page<UserModel>>(\n      `${environment.API_URL}/users/page/${page}/${environment.PAGE_SIZE}`\n    );\n  }\n\n  insert(user: Partial<UserModel>): Observable<UserModel> {\n    return this.http.post<UserModel>(`${environment.API_URL}/users`, user);\n  }\n\n  delete(id: number): Observable<UserModel> {\n    return this.http.delete<UserModel>(`${environment.API_URL}/users/${id}`);\n  }\n\n  list(): Observable<UserModel[]> {\n    return this.http.get<UserModel[]>(`${environment.API_URL}/users`);\n  }\n\n  update(id: number, user: Partial<UserModel>) {\n    return this.http.put<UserModel>(`${environment.API_URL}/users/${id}`, user);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "UserRepository",
            "type": "injectable"
        },
        {
            "name": "UserUseCase",
            "id": "injectable-UserUseCase-f4b01fbf712eee10906e856213d7aa82",
            "file": "projects/aps/src/app/users/application/user.usecase.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserModel>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<UserModel>>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "user",
                            "type": "Partial<UserModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserModel>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "Partial<UserModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UserModel[]>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "user",
                            "type": "Partial<UserModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserModel>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "Partial<UserModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Page } from '../../shared/interfaces/page.interface';\nimport { UseCase } from '../../shared/interfaces/usecase.interface';\nimport { UserModel } from '../domain/user.model';\nimport { UserRepository } from './user.repository';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserUseCase implements UseCase<UserModel> {\n  constructor(private user: UserRepository) {}\n\n  getByPage(page: number): Observable<Page<UserModel>> {\n    return this.user.getByPage(page);\n  }\n\n  delete(id: number): Observable<UserModel> {\n    return this.user.delete(id);\n  }\n\n  list(): Observable<UserModel[]> {\n    return this.user.list();\n  }\n\n  update(id: number, user: Partial<UserModel>): Observable<UserModel> {\n    return this.user.update(id, user);\n  }\n\n  insert(user: Partial<UserModel>): Observable<UserModel> {\n    return this.user.insert(user);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "user",
                        "type": "UserRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "user",
                        "type": "UserRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UtilsService",
            "id": "injectable-UtilsService-e13945d638b3902c9695be5587a5f005",
            "file": "projects/aps/src/app/helpers/services/utils.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "confirm",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showBottomSheet",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "content",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dto",
                            "type": "DtoExport<T | U>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T",
                        "U"
                    ],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "content",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dto",
                            "type": "DtoExport<T | U>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2000"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2000",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showModal",
                    "args": [
                        {
                            "name": "classComponent",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MatDialogRef<any>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "classComponent",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatBottomSheet } from '@angular/material/bottom-sheet';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Observable } from 'rxjs';\nimport { ConfirmComponent } from '../../shared/components/confirm/confirm.component';\nimport { DownloadComponent } from '../../shared/components/download/download.component';\nimport { DtoExport } from '../../shared/interfaces/dto-export.interface';\nimport { OptionsExport } from '../../shared/interfaces/option-export.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UtilsService {\n  constructor(\n    private dialog: MatDialog,\n    private snackBar: MatSnackBar,\n    private bottomSheet: MatBottomSheet\n  ) {}\n\n  confirm(message: string = ''): Observable<string> {\n    const reference: MatDialogRef<ConfirmComponent> = this.dialog.open(\n      ConfirmComponent,\n      {\n        width: '320px',\n        disableClose: true,\n      }\n    );\n\n    if (message) {\n      reference.componentInstance.message = message;\n    }\n\n    return reference.afterClosed();\n  }\n\n  showMessage(message: string, duration: number = 2000): void {\n    this.snackBar.open(message, '', {\n      duration,\n    });\n  }\n\n  showBottomSheet<T, U>(\n    title: string,\n    fileName: string,\n    content: T[],\n    dto: DtoExport<T, U>\n  ): void {\n    const options: OptionsExport<T, U> = { title, fileName, content, dto };\n    this.bottomSheet.open(DownloadComponent, { data: options });\n  }\n\n  showModal(\n    classComponent: any,\n    options: { [s: string]: string | boolean | number | object }\n  ): MatDialogRef<any> {\n    return this.dialog.open(classComponent, options);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthenticationGuard",
            "id": "injectable-AuthenticationGuard-80135ae682b5378f26e4d46d08c666ea",
            "file": "projects/aps/src/app/shared/guards/authentication.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanLoad } from '@angular/router';\nimport { AuthUseCase } from '../../core/application/auth.usecase';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthenticationGuard implements CanLoad {\n  constructor(private auth: AuthUseCase) {}\n\n  canLoad(): boolean {\n    return this.auth.isAuthenticated();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthUseCase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthUseCase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "AuthorizationGuard",
            "id": "injectable-AuthorizationGuard-410cacbe3327d89b2973480421501693",
            "file": "projects/aps/src/app/shared/guards/authorization.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { AuthUseCase } from '../../core/application/auth.usecase';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthorizationGuard implements CanActivate {\n  constructor(private auth: AuthUseCase) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    const { rolesAllowed } = route.data;\n    return this.auth.isAuthorized(rolesAllowed);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthUseCase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthUseCase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "TokenInterceptor",
            "id": "injectable-TokenInterceptor-7fa05f4e1dbda77d2579f44448ecefdf",
            "file": "projects/aps/src/app/shared/interceptors/token.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable, Injector } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, mergeMap, retry } from 'rxjs/operators';\nimport { AuthUseCase } from '../../core/application/auth.usecase';\nimport { Tokens } from '../../helpers/interfaces/tokens';\nimport { UtilsService } from '../../helpers/services/utils.service';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n  constructor(private injector: Injector, private utilsService: UtilsService) {}\n\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const authUseCase: AuthUseCase = this.injector.get(AuthUseCase);\n    const accessToken = authUseCase.accessToken;\n\n    const requestCloned = req.clone({\n      headers: req.headers.append('Authorization', `Bearer ${accessToken}`),\n    });\n\n    return next.handle(requestCloned).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (!(error.error instanceof ErrorEvent) && error.status === 409) {\n          const refreshToken = authUseCase.getFieldValue('refreshToken');\n          return authUseCase.getNewAccessToken(refreshToken).pipe(\n            retry(3),\n            mergeMap((response: Tokens) => {\n              authUseCase.setFieldValue('refreshToken', response.refreshToken);\n              authUseCase.setFieldValue('accessToken', response.accessToken);\n\n              const requestCloned = req.clone({\n                headers: req.headers.append(\n                  'Authorization',\n                  `Bearer ${response.accessToken}`\n                ),\n              });\n\n              return next.handle(requestCloned);\n            })\n          );\n        } else if (error.status === 401) {\n          return authUseCase.logout();\n        } else {\n          if (error.error && error.error.result) {\n            return throwError(error.error.result);\n          } else {\n            // this.utilsService.showMessage('Error!!!!');\n            return throwError(error);\n          }\n        }\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "AuthRepository",
            "id": "class-AuthRepository-966fc679d3a1ebaa8cee8989b92c47bd",
            "file": "projects/aps/src/app/core/application/auth.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { AuthModel } from '../domain/auth.model';\nimport { Tokens } from '../../helpers/interfaces/tokens';\n\nexport abstract class AuthRepository {\n  abstract login(auth: AuthModel): Observable<Tokens>;\n  abstract getNewAccessToken(refreshToken: string): Observable<Tokens>;\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getNewAccessToken",
                    "args": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Tokens>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "auth",
                            "type": "AuthModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Tokens>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "auth",
                            "type": "AuthModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseComponent",
            "id": "class-BaseComponent-61cb9b7fa264c68db2ca95284a999e4c",
            "file": "projects/aps/src/app/shared/classes/baseComponent.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { environment } from 'projects/aps/src/environments/environment';\nimport { Observable } from 'rxjs';\nimport { UtilsService } from '../../helpers/services/utils.service';\nimport { KeyPadButton } from '../interfaces/keybutton.interface';\nimport { MetaDataColumn } from '../interfaces/metacolumn.interface';\nimport { Page } from '../interfaces/page.interface';\nimport { UseCase } from '../interfaces/usecase.interface';\n\nexport abstract class BaseComponent<T, U extends UseCase<T>> {\n  abstract metaDataColumns: MetaDataColumn[];\n  abstract keypadButtons: KeyPadButton[];\n  protected utilsService: UtilsService;\n  protected useCase: U;\n\n  totalRecords: number = 0;\n  data: T[] = [];\n  currentPage: number = 0;\n\n  constructor(usecase: U, utilsService: UtilsService) {\n    this.utilsService = utilsService;\n    this.useCase = usecase;\n    this.changePage(0);\n  }\n\n  changePage(page: number) {\n    this.useCase.getByPage(page).subscribe((response: Page<T>) => {\n      this.currentPage = page;\n      this.data = response.records;\n      this.totalRecords = response.totalRecords;\n    });\n  }\n\n  delete(id: number) {\n    const result: Observable<string> = this.utilsService.confirm(\n      `¿Está seguro de querer eliminar?`\n    );\n    result.subscribe((res) => {\n      if (!res) {\n        return;\n      }\n\n      this.useCase.delete(id).subscribe(() => {\n        if (this.data.length > 1) {\n          this.changePage(this.currentPage);\n        } else {\n          this.changePage(this.currentPage === 0 ? 0 : this.currentPage - 1);\n        }\n        this.utilsService.showMessage('Eliminado correctamente');\n      });\n\n      /*       const position = this.records.findIndex((el) => el.id === id);\n      this.records.splice(position, 1);\n      const existsDataInPage = this.verifyExistsDataInPage(this.currentPage);\n      if (existsDataInPage) {\n        this.changePage(this.currentPage);\n      } else {\n        this.changePage(this.currentPage === 0 ? 0 : this.currentPage - 1);\n      } */\n    });\n  }\n\n  verifyExistsDataInPage(page: number): boolean {\n    return true;\n    /*     const pageSize = environment.PAGE_SIZE;\n    const skip = pageSize * page;\n    return !!this.records.slice(skip, skip + pageSize).length; */\n  }\n\n  abstract openForm(row: any): void;\n  abstract doAction(action: string): void;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "usecase",
                        "type": "U",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "usecase",
                        "type": "U",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "keypadButtons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyPadButton[]",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "metaDataColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaDataColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "useCase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "U",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "utilsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UtilsService",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "doAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openForm",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyExistsDataInPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CovidRepository",
            "id": "class-CovidRepository-60bf0828eb7cf11ceb4a016057ea0ef9",
            "file": "projects/aps/src/app/dashboard/application/covid.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { CovidModel } from '../domain/covid.model';\n\nexport abstract class CovidRepository {\n  abstract getAll(): Observable<CovidModel[]>;\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<CovidModel[]>",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DriverExportDto",
            "id": "class-DriverExportDto-004920fcd3b13d50299e8be86c42d71b",
            "file": "projects/aps/src/app/drivers/dtos/driver-export.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DtoExport } from '../../shared/interfaces/dto-export.interface';\nimport { DriverModel } from '../domain/driver.model';\n\nexport interface IDtoExportDriver {\n  'Nombre del piloto': string;\n}\n\nexport class DriverExportDto\n  implements DtoExport<DriverModel, IDtoExportDriver>\n{\n  mapping(data: DriverModel[]): IDtoExportDriver[] {\n    return data.map((driver: DriverModel) => ({\n      'Nombre del piloto': driver.nombre,\n    }));\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "mapping",
                    "args": [
                        {
                            "name": "data",
                            "type": "DriverModel[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IDtoExportDriver[]",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "DriverModel[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "DtoExport"
            ]
        },
        {
            "name": "DriverRepository",
            "id": "class-DriverRepository-0ce1ae2771f075969a7be1514bafeb3a",
            "file": "projects/aps/src/app/drivers/application/driver.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { Page } from '../../shared/interfaces/page.interface';\nimport { DriverModel } from '../domain/driver.model';\n\nexport abstract class DriverRepository {\n  abstract getByPage(page: number): Observable<Page<DriverModel>>;\n  abstract insert(driver: Partial<DriverModel>): Observable<DriverModel>;\n  abstract delete(id: number): Observable<DriverModel>;\n  abstract list(): Observable<DriverModel[]>;\n  abstract update(\n    id: number,\n    driver: Partial<DriverModel>\n  ): Observable<DriverModel>;\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DriverModel>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<DriverModel>>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "driver",
                            "type": "Partial<DriverModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DriverModel>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "driver",
                            "type": "Partial<DriverModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DriverModel[]>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "driver",
                            "type": "Partial<DriverModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DriverModel>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "driver",
                            "type": "Partial<DriverModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MedicExportDto",
            "id": "class-MedicExportDto-c92f8feb79f61908598e0a46daf94983",
            "file": "projects/aps/src/app/medics/dtos/medic-export.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DtoExport } from '../../shared/interfaces/dto-export.interface';\nimport { MedicModel } from '../domain/medic.model';\n\nexport interface IDtoExportMedic {\n  'Nombre del usuario': string;\n  'Correo electrónico': string;\n}\n\nexport class MedicExportDto implements DtoExport<MedicModel, IDtoExportMedic> {\n  mapping(data: MedicModel[]): IDtoExportMedic[] {\n    return data.map((medic: MedicModel) => ({\n      'Nombre del usuario': medic.nombre,\n      'Correo electrónico': medic.correo,\n      CMP: medic.cmp,\n    }));\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "mapping",
                    "args": [
                        {
                            "name": "data",
                            "type": "MedicModel[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IDtoExportMedic[]",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "MedicModel[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "DtoExport"
            ]
        },
        {
            "name": "MedicRepository",
            "id": "class-MedicRepository-64593a44e71a7c2acee4ccada1774ce8",
            "file": "projects/aps/src/app/medics/application/medic.repostiory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { Page } from '../../shared/interfaces/page.interface';\nimport { MedicModel } from '../domain/medic.model';\n\nexport abstract class MedicRepository {\n  abstract getByPage(page: number): Observable<Page<MedicModel>>;\n  abstract insert(medic: Partial<MedicModel>): Observable<MedicModel>;\n  abstract delete(id: number): Observable<MedicModel>;\n  abstract list(): Observable<MedicModel[]>;\n  abstract update(\n    id: number,\n    medic: Partial<MedicModel>\n  ): Observable<MedicModel>;\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MedicModel>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<MedicModel>>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "medic",
                            "type": "Partial<MedicModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MedicModel>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "medic",
                            "type": "Partial<MedicModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<MedicModel[]>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "medic",
                            "type": "Partial<MedicModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MedicModel>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "medic",
                            "type": "Partial<MedicModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SocketRepository",
            "id": "class-SocketRepository-fd59b86677fa55bcd4d6558cbdc06bf1",
            "file": "projects/aps/src/app/dashboard/application/socket.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { Entity } from '../domain/entity';\n\nexport abstract class SocketRepository {\n  abstract listen(eventName: string): Observable<Entity[]>;\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "listen",
                    "args": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Entity[]>",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "StorageInfraestructure",
            "id": "class-StorageInfraestructure-8c8e3af6a8afa4a4b5fcb108c191706b",
            "file": "projects/aps/src/app/core/infraestructure/storage.infraestructure.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { StorageRepository } from '../application/storage.repository';\nimport jwt_decode from 'jwt-decode';\n\ninterface IPayload {\n  iat: number;\n  exp: number;\n  name: string;\n  email: string;\n  roles: string[];\n}\n\nexport class StorageInfraestructure extends StorageRepository {\n  setStorage(nameProperty: string, value: string): void {\n    sessionStorage.setItem(nameProperty, value);\n  }\n  getStorage(nameProperty: string): string | null {\n    return sessionStorage.getItem(nameProperty);\n  }\n  clear(): void {\n    sessionStorage.clear();\n  }\n  getFieldInToken(fieldName: string) {\n    const accessToken = this.getStorage('accessToken');\n\n    if (!accessToken) {\n      return null;\n    }\n    try {\n      const payload: any = jwt_decode(accessToken) as IPayload;\n      return payload[fieldName];\n    } catch (error) {}\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StorageRepository"
                    }
                },
                {
                    "name": "getFieldInToken",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StorageRepository"
                    }
                },
                {
                    "name": "getStorage",
                    "args": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StorageRepository"
                    }
                },
                {
                    "name": "setStorage",
                    "args": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StorageRepository"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "StorageRepository",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "StorageRepository",
            "id": "class-StorageRepository-744705013f08aecd76c5e6891f6c4a0d",
            "file": "projects/aps/src/app/core/application/storage.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export abstract class StorageRepository {\n  abstract setStorage(nameProperty: string, value: string): void;\n  abstract getStorage(nameProperty: string): string | null;\n  abstract clear(): void;\n  abstract getFieldInToken(fieldName: string): any;\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "getFieldInToken",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStorage",
                    "args": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStorage",
                    "args": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UserExportDto",
            "id": "class-UserExportDto-31a8aa5b590d2d5d09a3686941a7fa71",
            "file": "projects/aps/src/app/users/dtos/user-export.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DtoExport } from '../../shared/interfaces/dto-export.interface';\nimport { UserModel } from '../domain/user.model';\n\nexport interface IDtoExportUser {\n  'Nombre del usuario': string;\n  'Correo electrónico': string;\n}\n\nexport class UserExportDto implements DtoExport<UserModel, IDtoExportUser> {\n  mapping(data: UserModel[]): IDtoExportUser[] {\n    return data.map((user: UserModel) => ({\n      'Nombre del usuario': user.nombre,\n      'Correo electrónico': user.correo,\n    }));\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "mapping",
                    "args": [
                        {
                            "name": "data",
                            "type": "UserModel[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IDtoExportUser[]",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "UserModel[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "DtoExport"
            ]
        },
        {
            "name": "UserRepository",
            "id": "class-UserRepository-a8ff15b4cb62101f4eb82e666f9296bf",
            "file": "projects/aps/src/app/users/application/user.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { Page } from '../../shared/interfaces/page.interface';\nimport { UserModel } from '../domain/user.model';\n\nexport abstract class UserRepository {\n  abstract getByPage(page: number): Observable<Page<UserModel>>;\n  abstract insert(user: Partial<UserModel>): Observable<UserModel>;\n  abstract delete(id: number): Observable<UserModel>;\n  abstract list(): Observable<UserModel[]>;\n  abstract update(id: number, user: Partial<UserModel>): Observable<UserModel>;\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserModel>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<UserModel>>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "user",
                            "type": "Partial<UserModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserModel>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "Partial<UserModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UserModel[]>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "user",
                            "type": "Partial<UserModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserModel>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "Partial<UserModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "RolesAllowedDirective",
            "id": "directive-RolesAllowedDirective-728fcd8899ac232ec70d54ad5c3aad20",
            "file": "projects/aps/src/app/shared/directives/roles-allowed.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { AuthUseCase } from '../../core/application/auth.usecase';\n\n@Directive({\n  selector: '[roles-allowed]',\n})\nexport class RolesAllowedDirective {\n  @Input('roles-allowed') rolesAllowed: string[] = [];\n  hasView = false;\n\n  constructor(\n    private templateRef: TemplateRef<any>,\n    private viewContainerRef: ViewContainerRef,\n    private authUseCase: AuthUseCase\n  ) {}\n\n  ngOnInit() {\n    this.execute();\n  }\n\n  execute() {\n    const isUserLogged = this.authUseCase.isAuthenticated();\n    const rolesUser = this.authUseCase.getRoles();\n\n    const lengthRolesAllowed = this.rolesAllowed.length;\n    let userAuthorized = false;\n\n    for (let ind = 0; ind < lengthRolesAllowed; ind++) {\n      if (rolesUser.includes(this.rolesAllowed[ind])) {\n        userAuthorized = true;\n        break;\n      }\n    }\n\n    if (isUserLogged && userAuthorized && !this.hasView) {\n      if (!this.hasView) {\n        this.viewContainerRef.createEmbeddedView(this.templateRef);\n        this.hasView = true;\n      }\n    } else {\n      this.viewContainerRef.clear();\n      this.hasView = false;\n    }\n  }\n}\n",
            "selector": "[roles-allowed]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "roles-allowed",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string[]"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "hasView",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authUseCase",
                        "type": "AuthUseCase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authUseCase",
                        "type": "AuthUseCase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "UploadDirective",
            "id": "directive-UploadDirective-31adfcf81f52289391718e685483361f",
            "file": "projects/aps/src/app/shared/directives/upload.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, EventEmitter, HostListener, Output } from '@angular/core';\n\n@Directive({\n  selector: '[upload]',\n})\nexport class UploadDirective {\n  @Output() onHover: EventEmitter<boolean> = new EventEmitter<boolean>();\n  @Output() onUpload: EventEmitter<File> = new EventEmitter<File>();\n\n  constructor() {}\n\n  @HostListener('dragover', ['$event']) onDragOver(event: any) {\n    event.preventDefault();\n    this.onHover.emit(true);\n  }\n\n  @HostListener('dragleave', ['$event']) onDragLeave(event: any) {\n    event.preventDefault();\n    this.onHover.emit(false);\n  }\n\n  @HostListener('drop', ['$event']) onDrop(event: any) {\n    event.preventDefault();\n    this.onHover.emit(false);\n\n    const file: File = event.dataTransfer.files[0];\n    this.onUpload.emit(file);\n  }\n}\n",
            "selector": "[upload]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onHover",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "onUpload",
                    "defaultValue": "new EventEmitter<File>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "EventEmitter<File>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17
                },
                {
                    "name": "dragover",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onDragLeave",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragleave', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragOver",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragover', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'drop', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-09fd4782606929ca8487bc79fa9fa274",
            "file": "projects/aps/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "aps-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfigLayout",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "expanded",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "defaultValue": "'aps'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "toggleExpanded",
                    "args": [
                        {
                            "name": "expanded",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "expanded",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ConfigLayout } from './config/interfaces/config-layout.interface';\nimport { ConfigService } from './config/services/config.service';\n\n@Component({\n  selector: 'aps-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  title = 'aps';\n  expanded = true;\n\n  config!: ConfigLayout;\n\n  constructor(private configService: ConfigService) {\n    this.configService.configuration.subscribe(\n      (response: ConfigLayout) => (this.config = response)\n    );\n  }\n\n  toggleExpanded(expanded: boolean) {\n    this.expanded = expanded;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../src/assets/styles/my-theme.scss';  //  <-- the theme file shown above\n\nmat-sidenav-content {\n  min-height: 100vh;\n}\n\nmat-sidenav {\n  max-width: 280px;\n  background-color:  mat-color($my-primary-color, 500) !important\n}\n\n.logo {\n  padding: 0 24px;\n  background-color: rbg(30, 33, 41);\n  color: hsla(0, 0%, 100%, 0.7) !important;\n  min-height: 64px;\n}\n\n.logo h3 {\n  padding: 0;\n  margin: 0;\n  line-height: 64px;\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-sidenav-container autosize=\"true\">\n  <mat-sidenav opened=\"true\" mode=\"side\" *ngIf=\"!config.menu.hidden\">\n    <div class=\"logo\" fxLayout fxLayoutGap=\"20px\" fxLayoutAlign=\"start center\">\n      <mat-icon>face</mat-icon>\n      <h3 *ngIf=\"expanded\" fxLayoutGap>Sistema de historias</h3>\n    </div>\n    <aps-menu (onToggleExpanded)=\"toggleExpanded($event)\"></aps-menu>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <aps-header *ngIf=\"!config.header.hidden\"></aps-header>\n    <router-outlet></router-outlet>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "What background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 322,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "Button contents",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Is this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "How large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CdevTableComponent",
            "id": "component-CdevTableComponent-3a30e82c4318dc70af09c5d2379f5ce3",
            "file": "projects/cdev-table/src/lib/cdev-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cdev-table",
            "styleUrls": [
                "./cdev-table.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./cdev-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "any"
                },
                {
                    "name": "metaDataColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "MetaDataColumn[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columnsDef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<MatColumnDef>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "MatColumnDef, {descendants: true}"
                        }
                    ]
                },
                {
                    "name": "listFields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTable<any>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatTable, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ContentChildren,\n  Input,\n  OnInit,\n  QueryList,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { MatColumnDef, MatTable } from '@angular/material/table';\nimport { MetaDataColumn } from './metacolumn.interface';\n\n@Component({\n  selector: 'cdev-table',\n  templateUrl: './cdev-table.component.html',\n  styleUrls: ['./cdev-table.component.css'],\n})\nexport class CdevTableComponent implements OnInit {\n  @Input() data: any;\n  @Input() metaDataColumns!: MetaDataColumn[];\n  listFields: string[] = [];\n  @ContentChildren(MatColumnDef, { descendants: true })\n  columnsDef!: QueryList<MatColumnDef>;\n  @ViewChild(MatTable, { static: true }) table!: MatTable<any>;\n\n  constructor() {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.metaDataColumns) {\n      this.listFields = this.metaDataColumns.map((x) => x.field);\n    }\n  }\n\n  ngOnInit(): void {}\n\n  ngAfterContentInit() {\n    if (!this.columnsDef) {\n      return;\n    }\n    this.columnsDef.forEach((columnDef) => {\n      this.listFields.push(columnDef.name);\n      this.table?.addColumnDef(columnDef);\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".highline:hover {\n  background-color: rgba(0, 0, 0, 0.1);\n}\n\n.head th {\n  font-size: 20px;\n}\n",
                    "styleUrl": "./cdev-table.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 24
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout=\"column\">\n  <ng-content></ng-content>\n  <table mat-table [dataSource]=\"data\">\n    <ng-container\n      [matColumnDef]=\"metadata.field\"\n      *ngFor=\"let metadata of metaDataColumns\"\n    >\n      <th mat-header-cell *matHeaderCellDef>{{ metadata.title }}</th>\n      <td mat-cell *matCellDef=\"let row\">{{ row[metadata.field] }}</td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"listFields; sticky: true\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: listFields\" class=\"highline\"></tr>\n  </table>\n</div>\n"
        },
        {
            "name": "ConfirmComponent",
            "id": "component-ConfirmComponent-8456f988950307900cfef4151ee0d49e",
            "file": "projects/aps/src/app/shared/components/confirm/confirm.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "aps-confirm",
            "styleUrls": [
                "./confirm.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "message",
                    "defaultValue": "'¿Quiere eliminar?'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'aps-confirm',\n  templateUrl: './confirm.component.html',\n  styleUrls: ['./confirm.component.css'],\n})\nexport class ConfirmComponent implements OnInit {\n  @Input()\n  message = '¿Quiere eliminar?';\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h3 {\n  text-align: center;\n}\n",
                    "styleUrl": "./confirm.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-dialog-content>\n  <h3>{{ message }}</h3>\n  <div fxLayout fxLayoutAlign=\"center center\" fxLayoutGap=\"15px\">\n    <button mat-raised-button color=\"accent\" mat-dialog-close=\"si\">Sí</button>\n    <button mat-button mat-dialog-close>No</button>\n  </div>\n</mat-dialog-content>\n"
        },
        {
            "name": "ContainerComponent",
            "id": "component-ContainerComponent-fcc21ed81ef005cf1ba90ac6daf6a6e6",
            "file": "projects/aps/src/app/shared/components/container/container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "aps-container",
            "styleUrls": [
                "./container.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'aps-container',\n  templateUrl: './container.component.html',\n  styleUrls: ['./container.component.css']\n})\nexport class ContainerComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  padding: 20px 0;\n  background-color: whitesmoke;\n  height: calc(100vh - 144px);\n}\n\nmat-card {\n  padding: 20px;\n}\n",
                    "styleUrl": "./container.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout fxLayoutAlign=\"center\" class=\"container\">\n  <mat-card fxFlex=\"1 1 95%\" class=\"mat-elevation-z15\">\n    <ng-content></ng-content>\n  </mat-card>\n</div>\n"
        },
        {
            "name": "CovidComponent",
            "id": "component-CovidComponent-c55db867405a6d44967d91843956a341",
            "file": "projects/aps/src/app/dashboard/components/covid/covid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "aps-covid",
            "styleUrls": [
                "./covid.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./covid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Entity[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "legend",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "legendPosition",
                    "defaultValue": "['right', 'below']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "legentTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "scheme",
                    "defaultValue": "{\n    domain: ['#5AA454', '#A10A28', '#C7B42C', '#AAAAAA'],\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "showGridLines",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "showXAxisLabel",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "showYAxisLabel",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "view",
                    "defaultValue": "[700, 450]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "xAxis",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "xAxisLabel",
                    "defaultValue": "'Países'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "yAxis",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "yAxisLabel",
                    "defaultValue": "'Casos confirmados'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "yScaleMax",
                    "defaultValue": "10000000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "yScaleMin",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CovidUseCase } from '../../application/covid.usecase';\nimport { CovidModel } from '../../domain/covid.model';\nimport { Entity } from '../../domain/entity';\n\n@Component({\n  selector: 'aps-covid',\n  templateUrl: './covid.component.html',\n  styleUrls: ['./covid.component.css'],\n})\nexport class CovidComponent implements OnInit {\n  /*   data: Entity[] = [\n    { name: 'Name01', value: 20 },\n    { name: 'Name02', value: 30 },\n    { name: 'Name03', value: 40 },\n    { name: 'Name04', value: 50 },\n    { name: 'Name05', value: 60 },\n  ]; */\n\n  data: Entity[] = [];\n\n  view: [number, number] = [700, 450];\n  scheme = {\n    domain: ['#5AA454', '#A10A28', '#C7B42C', '#AAAAAA'],\n  };\n\n  xAxis = true;\n  yAxis = true;\n  showXAxisLabel = true;\n  showYAxisLabel = true;\n  yAxisLabel = 'Casos confirmados';\n  xAxisLabel = 'Países';\n  yScaleMin = 0;\n  yScaleMax = 10000000;\n  showGridLines = true;\n  legend = true;\n  legendPosition = ['right', 'below'];\n  legentTitle = '';\n\n  constructor(private covidUseCase: CovidUseCase) {}\n\n  ngOnInit(): void {\n    this.covidUseCase.getAll().subscribe((data: CovidModel[]) => {\n      this.data = data.map((covid: CovidModel) => ({\n        name: covid.countryRegion,\n        value: covid.confirmed,\n      }));\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./covid.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "covidUseCase",
                        "type": "CovidUseCase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "covidUseCase",
                        "type": "CovidUseCase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ngx-charts-bar-vertical\n  [view]=\"view\"\n  [results]=\"data\"\n  [scheme]=\"scheme\"\n  [xAxis]=\"xAxis\"\n  [yAxis]=\"yAxis\"\n  [legend]=\"legend\"\n  [showXAxisLabel]=\"showXAxisLabel\"\n  [showYAxisLabel]=\"showYAxisLabel\"\n  [xAxisLabel]=\"xAxisLabel\"\n  [yAxisLabel]=\"yAxisLabel\"\n>\n</ngx-charts-bar-vertical>\n"
        },
        {
            "name": "DownloadComponent",
            "id": "component-DownloadComponent-95fa295ac424e22504b476358a306a88",
            "file": "projects/aps/src/app/shared/components/download/download.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "aps-download",
            "styleUrls": [
                "./download.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./download.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataToExport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "addColumnsToPDF",
                    "args": [
                        {
                            "name": "dataFormatted",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataFormatted",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addDataToPDF",
                    "args": [
                        {
                            "name": "dataFormatted",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataFormatted",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "export",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "option",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "option",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportToExcel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "exportToPDF",
                    "args": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getInformationFormatted",
                    "args": [],
                    "optional": false,
                    "returnType": "{ content: {}; styles: { header: { fontSize: number; bold: boolean; margin: {}; }; }; }",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "transformDataByDTO",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport {\n  MatBottomSheetRef,\n  MAT_BOTTOM_SHEET_DATA,\n} from '@angular/material/bottom-sheet';\nimport * as XLS from 'xlsx';\n\ndeclare var require: any;\n\nconst pdfMake = require('pdfmake/build/pdfmake.js');\nconst pdfFonts = require('pdfmake/build/vfs_fonts.js');\npdfMake.vfs = pdfFonts.pdfMake.vfs;\n\n@Component({\n  selector: 'aps-download',\n  templateUrl: './download.component.html',\n  styleUrls: ['./download.component.css'],\n})\nexport class DownloadComponent implements OnInit {\n  dataToExport!: any[];\n\n  constructor(\n    @Inject(MAT_BOTTOM_SHEET_DATA) private data: any,\n    private reference: MatBottomSheetRef<DownloadComponent>\n  ) {}\n\n  ngOnInit(): void {}\n\n  export(event: MouseEvent, option: string, action: string = ''): void {\n    this.transformDataByDTO();\n    event.preventDefault();\n    switch (option) {\n      case 'excel':\n        this.exportToExcel();\n        break;\n      case 'pdf':\n        this.exportToPDF(action);\n        break;\n    }\n    this.reference.dismiss();\n  }\n\n  transformDataByDTO() {\n    this.dataToExport = this.data.dto.mapping(this.data.content);\n  }\n\n  exportToExcel() {\n    const ws: XLS.WorkSheet = XLS.utils.json_to_sheet(this.dataToExport);\n    const book: XLS.WorkBook = XLS.utils.book_new();\n\n    XLS.utils.book_append_sheet(book, ws, this.data.title);\n    XLS.writeFile(book, this.data.fileName + '.xlsx');\n  }\n\n  exportToPDF(action: string) {\n    const informationFormatted = this.getInformationFormatted();\n    const pdfGenerated = pdfMake.createPdf(informationFormatted);\n    switch (action) {\n      case 'open':\n        pdfGenerated.open();\n        break;\n      case 'print':\n        pdfGenerated.print();\n        break;\n      case 'download':\n        pdfGenerated.download();\n    }\n  }\n\n  getInformationFormatted() {\n    const dataFormatted = {\n      content: [\n        {\n          text: this.data.title,\n          bold: true,\n          fontSize: 20,\n          alignment: 'center',\n          margin: [0, 0, 0, 20],\n        },\n      ],\n      styles: {\n        header: {\n          fontSize: 20,\n          bold: true,\n          margin: [0, 0, 0, 20],\n        },\n      },\n    };\n\n    this.addColumnsToPDF(dataFormatted);\n    this.addDataToPDF(dataFormatted);\n\n    return dataFormatted;\n  }\n\n  addColumnsToPDF(dataFormatted: any) {\n    const headerData = this.dataToExport[0];\n    const headersColumns = [];\n    for (const key in headerData) {\n      headersColumns.push({ text: key, style: 'header' });\n    }\n\n    dataFormatted.content.push({ columns: headersColumns });\n  }\n\n  addDataToPDF(dataFormatted: any) {\n    this.dataToExport.forEach((data) => {\n      const items = [];\n      for (const key in data) {\n        items.push(data[key]);\n      }\n\n      dataFormatted.content.push({ columns: items });\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./download.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "reference",
                        "type": "MatBottomSheetRef<DownloadComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "reference",
                        "type": "MatBottomSheetRef<DownloadComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-nav-list>\n  <a href=\"#\" mat-list-item (click)=\"export($event, 'excel')\">\n    <span>Exportar a Excel</span> </a\n  ><a href=\"#\" mat-list-item (click)=\"export($event, 'pdf', 'open')\">\n    <span>Exportar a PDF (open)</span>\n  </a>\n\n  <a href=\"#\" mat-list-item (click)=\"export($event, 'pdf', 'print')\">\n    <span>Exporta a PDF (print)</span> </a\n  ><a href=\"#\" mat-list-item (click)=\"export($event, 'pdf', 'download')\">\n    <span> Exportar a PDF (download) </span>\n  </a>\n</mat-nav-list>\n"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-d482b1f2571f2fe332fa15c571406625",
            "file": "projects/aps/src/app/drivers/components/form/form.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER"
                },
                {
                    "name": "MAT_SELECT_SCROLL_STRATEGY_PROVIDER"
                }
            ],
            "selector": "aps-form",
            "styleUrls": [
                "./form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "loadForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MAT_SELECT_SCROLL_STRATEGY_PROVIDER } from '@angular/material/select';\nimport { MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER } from '@angular/material/tooltip';\n\n@Component({\n  selector: 'aps-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    MAT_SELECT_SCROLL_STRATEGY_PROVIDER,\n  ],\n})\nexport class FormComponent implements OnInit {\n  title: string;\n  group!: FormGroup;\n\n  constructor(\n    private reference: MatDialogRef<FormComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.title = data ? 'EDICIÓN' : 'NUEVO';\n  }\n\n  ngOnInit(): void {\n    this.loadForm();\n  }\n\n  loadForm() {\n    this.group = new FormGroup({\n      id: new FormControl(this.data?.id),\n      nombre: new FormControl(this.data?.nombre, Validators.required),\n    });\n  }\n\n  save() {\n    const record = this.group.value;\n    this.reference.close(record);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".panel-container {\n  width: 600px;\n}\n\n.panel-container .mat-dialog-container {\n  padding: 0;\n}\n\n.panel-container .mat-dialog-content {\n  margin: 0;\n  padding: 24px;\n}\n\n@media (max-width: 599px) {\n  .panel-container {\n    width: 95%;\n  }\n}\n",
                    "styleUrl": "./form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "reference",
                        "type": "MatDialogRef<FormComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "reference",
                        "type": "MatDialogRef<FormComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-toolbar fxLayout fxLayoutAlign=\"space-between center\">\n  <h3>{{ title }}</h3>\n  <button mat-icon-button mat-dialog-close>\n    <mat-icon>close</mat-icon>\n  </button>\n</mat-toolbar>\n\n<mat-dialog-content>\n  <form fxLayout=\"column\" [formGroup]=\"group\">\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Nombre</mat-label>\n      <input type=\"text\" matInput formControlName=\"nombre\" required />\n    </mat-form-field>\n    <div fxLayout fxLayoutAlign=\"end\" fxLayoutGap=\"10px\">\n      <button\n        mat-raised-button\n        color=\"primary\"\n        type=\"button\"\n        [disabled]=\"group.invalid\"\n        (click)=\"save()\"\n      >\n        Grabar\n      </button>\n      <button mat-button type=\"button\" color=\"primary\" mat-dialog-close>\n        Cancelar\n      </button>\n    </div>\n  </form>\n</mat-dialog-content>\n"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-f4c43f06b3f574456578cf39041729c7-1",
            "file": "projects/aps/src/app/medics/components/form/form.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER"
                },
                {
                    "name": "MAT_SELECT_SCROLL_STRATEGY_PROVIDER"
                }
            ],
            "selector": "aps-form",
            "styleUrls": [
                "./form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "photoToShow",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "loadForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MAT_SELECT_SCROLL_STRATEGY_PROVIDER } from '@angular/material/select';\nimport { MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER } from '@angular/material/tooltip';\n\n@Component({\n  selector: 'aps-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    MAT_SELECT_SCROLL_STRATEGY_PROVIDER,\n  ],\n})\nexport class FormComponent implements OnInit {\n  title: string;\n  group!: FormGroup;\n  photoToShow = '';\n\n  constructor(\n    private reference: MatDialogRef<FormComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.title = data ? 'EDICIÓN' : 'NUEVO';\n  }\n\n  ngOnInit(): void {\n    this.loadForm();\n  }\n\n  loadForm() {\n    this.group = new FormGroup({\n      id: new FormControl(this.data?.id),\n      nombre: new FormControl(this.data?.nombre, Validators.required),\n      segundo_nombre: new FormControl(\n        this.data?.segundo_nombre,\n        Validators.required\n      ),\n      apellido: new FormControl(this.data?.apellido, Validators.required),\n      cmp: new FormControl(this.data?.cmp, Validators.required),\n      dni: new FormControl(this.data?.dni, Validators.required),\n      correo: new FormControl(this.data?.correo, Validators.required),\n    });\n\n    if (this.data) {\n      this.group.addControl('foto', new FormControl(null));\n      if (this.data.foto) {\n        this.photoToShow = this.data.foto;\n      }\n    } else {\n      this.group.addControl('foto', new FormControl(null, Validators.required));\n    }\n\n    /*     this.group.controls['foto'].disable();\n    this.group.controls['nombre'].disable(); */\n  }\n\n  save() {\n    const record = this.group.value;\n    const recordId = record.id;\n\n    delete record.id;\n\n    const formData = new FormData();\n    for (const key of Object.keys(record)) {\n      const value = record[key];\n      formData.append(key, value);\n    }\n\n    this.reference.close({ id: recordId, medic: formData });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".panel-container {\n  width: 600px;\n}\n\n.panel-container .mat-dialog-container {\n  padding: 0;\n}\n\n.panel-container .mat-dialog-content {\n  margin: 0;\n  padding: 24px;\n}\n\n@media (max-width: 599px) {\n  .panel-container {\n    width: 95%;\n  }\n}\n",
                    "styleUrl": "./form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "reference",
                        "type": "MatDialogRef<FormComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "reference",
                        "type": "MatDialogRef<FormComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "FormComponent-1",
            "templateData": "<mat-toolbar fxLayout fxLayoutAlign=\"space-between center\">\n  <h3>{{ title }}</h3>\n  <button mat-icon-button mat-dialog-close>\n    <mat-icon>close</mat-icon>\n  </button>\n</mat-toolbar>\n\n<mat-dialog-content>\n  <form fxLayout=\"column\" [formGroup]=\"group\">\n    <div fxLayout fxLayoutGap=\"10px\">\n      <div fxLayout=\"column\" fxFlex=\"1 1 33%\">\n        <aps-photo\n          [photoByDefault]=\"photoToShow\"\n          formControlName=\"foto\"\n        ></aps-photo>\n      </div>\n      <div fxLayout=\"column\" fxFlex=\"1 1 33%\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Nombre</mat-label>\n          <input type=\"text\" matInput formControlName=\"nombre\" required />\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Segundo nombre</mat-label>\n          <input\n            type=\"text\"\n            matInput\n            formControlName=\"segundo_nombre\"\n            required\n          />\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Apellido</mat-label>\n          <input type=\"text\" matInput formControlName=\"apellido\" required />\n        </mat-form-field>\n      </div>\n      <div fxLayout=\"column\" fxFlex=\"1 1 33%\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>CMP</mat-label>\n          <input type=\"text\" matInput formControlName=\"cmp\" required />\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>DNI</mat-label>\n          <input type=\"text\" matInput formControlName=\"dni\" required />\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Correo</mat-label>\n          <input type=\"text\" matInput formControlName=\"correo\" required />\n        </mat-form-field>\n      </div>\n    </div>\n\n    <div fxLayout fxLayoutAlign=\"end\" fxLayoutGap=\"10px\">\n      <button\n        mat-raised-button\n        color=\"primary\"\n        type=\"button\"\n        [disabled]=\"group.invalid\"\n        (click)=\"save()\"\n      >\n        Grabar\n      </button>\n      <button mat-button type=\"button\" color=\"primary\" mat-dialog-close>\n        Cancelar\n      </button>\n    </div>\n  </form>\n</mat-dialog-content>\n"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-417be76c369ef43467c530ef953abb69-2",
            "file": "projects/aps/src/app/users/components/form/form.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER"
                },
                {
                    "name": "MAT_SELECT_SCROLL_STRATEGY_PROVIDER"
                }
            ],
            "selector": "aps-form",
            "styleUrls": [
                "./form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "roles",
                    "defaultValue": "[\n    { id: 1, name: 'ADMIN' },\n    { id: 2, name: 'OPERATOR' },\n    { id: 3, name: 'MEDIC' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "loadForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MAT_SELECT_SCROLL_STRATEGY_PROVIDER } from '@angular/material/select';\nimport { MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER } from '@angular/material/tooltip';\n\n@Component({\n  selector: 'aps-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    MAT_SELECT_SCROLL_STRATEGY_PROVIDER,\n  ],\n})\nexport class FormComponent implements OnInit {\n  roles = [\n    { id: 1, name: 'ADMIN' },\n    { id: 2, name: 'OPERATOR' },\n    { id: 3, name: 'MEDIC' },\n  ];\n  title: string;\n  group!: FormGroup;\n\n  constructor(\n    private reference: MatDialogRef<FormComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.title = data ? 'EDICIÓN' : 'NUEVO';\n  }\n\n  ngOnInit(): void {\n    this.loadForm();\n  }\n\n  loadForm() {\n    this.group = new FormGroup({\n      id: new FormControl(this.data?.id),\n      nombre: new FormControl(this.data?.nombre, Validators.required),\n      correo: new FormControl(this.data?.correo, [\n        Validators.required,\n        Validators.email,\n      ]),\n      roles: new FormControl(this.data?.roles.map((role: any) => role.id)),\n    });\n\n    if (this.data) {\n      this.group.addControl('password', new FormControl(''));\n    } else {\n      this.group.addControl(\n        'password',\n        new FormControl('', Validators.required)\n      );\n    }\n  }\n\n  save() {\n    const record = this.group.value;\n    this.reference.close(record);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".panel-container {\n  width: 600px;\n}\n\n.panel-container .mat-dialog-container {\n  padding: 0;\n}\n\n.panel-container .mat-dialog-content {\n  margin: 0;\n  padding: 24px;\n}\n\n@media (max-width: 599px) {\n  .panel-container {\n    width: 95%;\n  }\n}\n",
                    "styleUrl": "./form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "reference",
                        "type": "MatDialogRef<FormComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "reference",
                        "type": "MatDialogRef<FormComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "FormComponent-2",
            "templateData": "<mat-toolbar fxLayout fxLayoutAlign=\"space-between center\">\n  <h3>{{ title }}</h3>\n  <button mat-icon-button mat-dialog-close>\n    <mat-icon>close</mat-icon>\n  </button>\n</mat-toolbar>\n\n<mat-dialog-content>\n  <form fxLayout=\"column\" [formGroup]=\"group\">\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Nombre</mat-label>\n      <input type=\"text\" matInput formControlName=\"nombre\" required />\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Correo</mat-label>\n      <input type=\"text\" matInput formControlName=\"correo\" required />\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Password</mat-label>\n      <input type=\"password\" matInput formControlName=\"password\" />\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Roles</mat-label>\n      <mat-select multiple formControlName=\"roles\" required>\n        <mat-option *ngFor=\"let role of roles\" [value]=\"role.id\">\n          {{ role.name }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <div fxLayout fxLayoutAlign=\"end\" fxLayoutGap=\"10px\">\n      <button\n        mat-raised-button\n        color=\"primary\"\n        type=\"button\"\n        [disabled]=\"group.invalid\"\n        (click)=\"save()\"\n      >\n        Grabar\n      </button>\n      <button mat-button type=\"button\" color=\"primary\" mat-dialog-close>\n        Cancelar\n      </button>\n    </div>\n  </form>\n</mat-dialog-content>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-c30455410cee13d43cd8cd06b823a663",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg\n          width=\"32\"\n          height=\"32\"\n          viewBox=\"0 0 32 32\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg\n          width=\"32\"\n          height=\"32\"\n          viewBox=\"0 0 32 32\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: string = '';\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-bb546822ca087ca78099fd7ff48294d5-1",
            "file": "projects/aps/src/app/core/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "aps-header",
            "styleUrls": [
                "./header.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AuthUseCase } from '../../application/auth.usecase';\n\n@Component({\n  selector: 'aps-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css'],\n})\nexport class HeaderComponent implements OnInit {\n  constructor(private auth: AuthUseCase) {}\n\n  ngOnInit(): void {}\n\n  logout() {\n    this.auth.logout();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-toolbar {\n  border-bottom: 1px solid #6b6b6b;\n}\n\nmat-toolbar img {\n  width: 40px;\n  max-height: 40px;\n  border-radius: 50%;\n  border: 1px solid transparent;\n}\n\n.profile {\n  height: 100%;\n}\n",
                    "styleUrl": "./header.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthUseCase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthUseCase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<mat-toolbar fxLayout fxLayoutAlign=\"end center\" color=\"primary\">\n  <button mat-button class=\"profile\" [matMenuTriggerFor]=\"menu\">\n    <img src=\"/assets/img/avatar.jpg\" alt=\"\" />\n    <span>Nombre usuario</span>\n    <mat-icon>keyboard_arrow_down</mat-icon>\n  </button>\n  <mat-menu #menu=\"matMenu\">\n    <button mat-menu-item (click)=\"logout()\">\n      <mat-icon>logout</mat-icon>\n      <span>Cerrar sesión</span>\n    </button>\n  </mat-menu>\n</mat-toolbar>\n"
        },
        {
            "name": "KeypadComponent",
            "id": "component-KeypadComponent-7fa32308dc483466dfabf0fbe17f7434",
            "file": "projects/aps/src/app/shared/components/keypad/keypad.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "aps-keypad",
            "styleUrls": [
                "./keypad.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./keypad.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "keypadButtons",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "KeyPadButton[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "doAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { KeyPadButton } from '../../interfaces/keybutton.interface';\n\n@Component({\n  selector: 'aps-keypad',\n  templateUrl: './keypad.component.html',\n  styleUrls: ['./keypad.component.css'],\n})\nexport class KeypadComponent implements OnInit {\n  @Input() keypadButtons: KeyPadButton[] = [];\n  @Output() onClick: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  doAction(action: string) {\n    this.onClick.emit(action);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "div {\n  position: fixed;\n  bottom: 70px;\n  right: 10px;\n  z-index: 10000000;\n}\n",
                    "styleUrl": "./keypad.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout=\"column\" fxLayoutGap=\"10px\">\n  <button\n    mat-fab\n    *ngFor=\"let button of keypadButtons\"\n    [color]=\"button.color\"\n    [matTooltip]=\"button.tooltip\"\n    (click)=\"doAction(button.action)\"\n  >\n    <mat-icon>{{ button.icon }}</mat-icon>\n  </button>\n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-bd9b7641d9c6c65dadfb7c989a712382",
            "file": "projects/aps/src/app/core/components/login/login.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "aps-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<AuthModel>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<AuthModel>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "togglePassword",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { AuthModel } from '../../domain/auth.model';\n\n@Component({\n  selector: 'aps-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class LoginComponent implements OnInit {\n  @Output() onLogin: EventEmitter<AuthModel> = new EventEmitter<AuthModel>();\n  group: FormGroup;\n  togglePassword = true;\n\n  constructor() {\n    this.group = new FormGroup({\n      correo: new FormControl(null, [Validators.required, Validators.email]),\n      password: new FormControl(null, Validators.required),\n      recaptchaReactive: new FormControl('abc'),\n      // recaptchaReactive: new FormControl(null, Validators.required),\n    });\n  }\n\n  ngOnInit(): void {\n    console.log('ngOnInit');\n  }\n  ngOnDestroy():void {\n    console.log('gOnDestroy');\n  }\n\n  login() {\n    const userInfo: AuthModel = this.group.value;\n    this.onLogin.emit(userInfo);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/my-theme.scss';\n\n\n:host {\n  width: 80%;\n  display: block;\n}\n\nh2 {\n  text-align: center;\n}\n\n.recaptcha {\n  padding: 10px 0;\n}\n\n\n.mat-form-field-appearance-fill .mat-form-field-flex  {\n  background-color: mat-color($my-primary-color, 50);\n}\n\n.mat-placeholder-required .mat-form-field-required-marker{\n  background-color: white;\n  color: black;\n}\n.mat-form-field.mat-form-field-invalid .mat-form-field-label{\n  color: white;\n}",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form fxLayout=\"column\" [formGroup]=\"group\">\n  <h2>Credenciales</h2>\n  <mat-form-field appearance=\"fill\">\n    <mat-label>Correo</mat-label>\n    <input\n    class=\"input\"\n      type=\"text\"\n      matInput\n      required\n      placeholder=\"Ingrese su correo\"\n      formControlName=\"correo\"\n    />\n    <mat-icon matSuffix color=\"primary\">email</mat-icon>\n  </mat-form-field>\n  <mat-form-field appearance=\"fill\">\n    <mat-label>Contraseña</mat-label>\n    <input\n      type=\"{{ togglePassword ? 'password' : 'text' }}\"\n      matInput\n      required\n      placeholder=\"Ingrese su contraseña\"\n      formControlName=\"password\"\n    />\n    <button\n      mat-icon-button\n      matSuffix\n      type=\"button\"\n      (click)=\"togglePassword = !togglePassword\"\n    >\n      <mat-icon color=\"primary\">{{ togglePassword ? \"lock\" : \"lock_open\" }}</mat-icon>\n    </button>\n  </mat-form-field>\n<!--   <div class=\"recaptcha\">\n    <re-captcha formControlName=\"recaptchaReactive\"></re-captcha>\n  </div> -->\n  <button\n    mat-raised-button\n    color=\"primary\"\n    [disabled]=\"group.invalid\"\n    (click)=\"login()\"\n  >\n    Ingresar\n  </button>\n</form>\n"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-2cf752ad54c2d84c7cfa088611101075",
            "file": "projects/aps/src/app/core/components/menu/menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "aps-menu",
            "styleUrls": [
                "./menu.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onToggleExpanded",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "expanded",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "listMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenu[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleExpand",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { IMenu, MenuService } from '../../../helpers/services/menu.service';\n\n@Component({\n  selector: 'aps-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.css'],\n})\nexport class MenuComponent implements OnInit {\n  @Output() onToggleExpanded: EventEmitter<boolean> =\n    new EventEmitter<boolean>();\n  expanded = true;\n  listMenu: IMenu[];\n\n  constructor(private menuService: MenuService) {\n    this.listMenu = this.menuService.getMenu();\n  }\n\n  ngOnInit(): void {}\n\n  toggleExpand() {\n    this.expanded = !this.expanded;\n    this.onToggleExpanded.emit(this.expanded);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-nav-list {\n  width: 95%;\n  height: calc(100vh - 74px);\n}\n\nmat-list-item {\n  margin-top: 10px;\n  border-radius: 0 24px 24px 0;\n}\n\na,\na:link,\na:visited,\na:active {\n  color: white !important;\n  font-size: 14px;\n}\n\nspan {\n  display: inline-block;\n  padding-left: 8px;\n}\n",
                    "styleUrl": "./menu.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "menuService",
                        "type": "MenuService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "menuService",
                        "type": "MenuService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-nav-list fxLayout=\"column\" fxLayoutAlign=\"space-between\">\n  <div>\n    <mat-list-item *ngFor=\"let menu of listMenu\">\n      <a [routerLink]=\"menu.url\">\n        <button mat-icon-button>\n          <mat-icon [svgIcon]=\"menu.icon\"></mat-icon>\n          <span *ngIf=\"expanded\">{{ menu.title }}</span>\n        </button>\n      </a>\n    </mat-list-item>\n  </div>\n  <div>\n    <mat-list-item>\n      <button mat-icon-button color=\"accent\" (click)=\"toggleExpand()\">\n        <mat-icon *ngIf=\"expanded\">arrow_back_ios</mat-icon>\n        <mat-icon *ngIf=\"!expanded\">arrow_forward_ios</mat-icon>\n      </button>\n    </mat-list-item>\n  </div>\n</mat-nav-list>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageListComponent",
            "id": "component-PageListComponent-23a9b03c96f47c6127eb08f80235e3dd",
            "file": "projects/aps/src/app/drivers/pages/page-list/page-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "aps-page-list",
            "styleUrls": [
                "./page-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DriverModel[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "keypadButtons",
                    "defaultValue": "[\n    {\n      icon: 'cloud_download',\n      tooltip: 'DESCARGAR',\n      color: 'accent',\n      action: 'DOWNLOAD',\n    },\n    {\n      icon: 'add',\n      tooltip: 'AGREGAR',\n      color: 'primary',\n      action: 'NEW',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyPadButton[]",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "metaDataColumns",
                    "defaultValue": "[\n    { field: 'id', title: 'ID' },\n    { field: 'nombre', title: 'Nombre' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaDataColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "useCase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "U",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "utilsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UtilsService",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "doAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "openForm",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "verifyExistsDataInPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { UtilsService } from '../../../helpers/services/utils.service';\nimport { BaseComponent } from '../../../shared/classes/baseComponent';\nimport { KeyPadButton } from '../../../shared/interfaces/keybutton.interface';\nimport { MetaDataColumn } from '../../../shared/interfaces/metacolumn.interface';\nimport { DriverUseCase } from '../../application/driver.usecase';\nimport { FormComponent } from '../../components/form/form.component';\nimport { DriverModel } from '../../domain/driver.model';\nimport { DriverExportDto } from '../../dtos/driver-export.dto';\n\n@Component({\n  selector: 'aps-page-list',\n  templateUrl: './page-list.component.html',\n  styleUrls: ['./page-list.component.css'],\n})\nexport class PageListComponent extends BaseComponent<\n  DriverModel,\n  DriverUseCase\n> {\n  data: DriverModel[] = [];\n  totalRecords: number = 0;\n  keypadButtons: KeyPadButton[] = [\n    {\n      icon: 'cloud_download',\n      tooltip: 'DESCARGAR',\n      color: 'accent',\n      action: 'DOWNLOAD',\n    },\n    {\n      icon: 'add',\n      tooltip: 'AGREGAR',\n      color: 'primary',\n      action: 'NEW',\n    },\n  ];\n\n  metaDataColumns: MetaDataColumn[] = [\n    { field: 'id', title: 'ID' },\n    { field: 'nombre', title: 'Nombre' },\n  ];\n\n  constructor(\n    protected driver: DriverUseCase,\n    protected utilsService: UtilsService\n  ) {\n    super(driver, utilsService);\n  }\n\n  openForm(row: any = null) {\n    const options = {\n      panelClass: 'panel-container',\n      disableClose: true,\n      data: row,\n    };\n    const reference: MatDialogRef<FormComponent> = this.utilsService.showModal(\n      FormComponent,\n      options\n    );\n\n    reference.afterClosed().subscribe((response) => {\n      if (!response) {\n        return;\n      }\n\n      if (response.id) {\n        const driver = { ...response };\n        delete driver.id;\n\n        this.driver.update(response.id, driver).subscribe(() => {\n          this.changePage(this.currentPage);\n          this.utilsService.showMessage('Registro actualizado');\n        });\n      } else {\n        const driver = { ...response };\n        delete driver.id;\n        this.driver.insert(driver).subscribe(() => {\n          this.changePage(this.currentPage);\n          this.utilsService.showMessage('Registro actualizado');\n        });\n      }\n    });\n  }\n\n  doAction(action: string) {\n    switch (action) {\n      case 'DOWNLOAD':\n        const dto = new DriverExportDto();\n        this.driver.list().subscribe((response: DriverModel[]) => {\n          this.utilsService.showBottomSheet(\n            'Lista de pilotos',\n            'drivers',\n            response,\n            dto\n          );\n        });\n        break;\n      case 'NEW':\n        this.openForm();\n        break;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "driver",
                        "type": "DriverUseCase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "driver",
                        "type": "DriverUseCase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<aps-title></aps-title>\n<aps-container>\n  <perfect-scrollbar class=\"heightMaxPerfectScrollbar\">\n    <cdev-table [data]=\"data\" [metaDataColumns]=\"metaDataColumns\">\n      <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef></th>\n        <td mat-cell *matCellDef=\"let row\" class=\"align-right\">\n          <button\n            mat-icon-button\n            color=\"primary\"\n            (click)=\"openForm(row)\"\n            matTooltip=\"EDITAR\"\n          >\n            <mat-icon>edit</mat-icon>\n          </button>\n          <button\n            mat-icon-button\n            color=\"accent\"\n            (click)=\"delete(row.id)\"\n            matTooltip=\"ELIMINAR\"\n          >\n            <mat-icon>delete</mat-icon>\n          </button>\n        </td>\n      </ng-container>\n    </cdev-table>\n  </perfect-scrollbar>\n  <aps-paginator\n    (onChangePage)=\"changePage($event)\"\n    [length]=\"totalRecords\"\n    [currentPage]=\"currentPage\"\n  ></aps-paginator>\n</aps-container>\n<aps-keypad\n  [keypadButtons]=\"keypadButtons\"\n  (onClick)=\"doAction($event)\"\n></aps-keypad>\n"
        },
        {
            "name": "PageListComponent",
            "id": "component-PageListComponent-caadbfaf322cd53b009887a92d1e4a31-1",
            "file": "projects/aps/src/app/medics/pages/page-list/page-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "aps-page-list",
            "styleUrls": [
                "./page-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MedicModel[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "keypadButtons",
                    "defaultValue": "[\n    {\n      icon: 'cloud_download',\n      tooltip: 'DESCARGAR',\n      color: 'accent',\n      action: 'DOWNLOAD',\n    },\n    {\n      icon: 'add',\n      tooltip: 'AGREGAR',\n      color: 'primary',\n      action: 'NEW',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyPadButton[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "metaDataColumns",
                    "defaultValue": "[\n    { field: 'id', title: 'ID' },\n    { field: 'nombre', title: 'Nombre' },\n    { field: 'apellido', title: 'Apellido' },\n    { field: 'cmp', title: 'CMP' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaDataColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "useCase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "U",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "utilsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UtilsService",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "doAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "openForm",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "verifyExistsDataInPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { UtilsService } from '../../../helpers/services/utils.service';\nimport { BaseComponent } from '../../../shared/classes/baseComponent';\nimport { KeyPadButton } from '../../../shared/interfaces/keybutton.interface';\nimport { MetaDataColumn } from '../../../shared/interfaces/metacolumn.interface';\nimport { MedicUseCase } from '../../application/medic.usecase';\nimport { FormComponent } from '../../components/form/form.component';\nimport { MedicModel } from '../../domain/medic.model';\nimport { MedicExportDto } from '../../dtos/medic-export.dto';\n\n@Component({\n  selector: 'aps-page-list',\n  templateUrl: './page-list.component.html',\n  styleUrls: ['./page-list.component.css'],\n})\nexport class PageListComponent extends BaseComponent<MedicModel, MedicUseCase> {\n  data: MedicModel[] = [];\n  totalRecords: number = 0;\n  keypadButtons: KeyPadButton[] = [\n    {\n      icon: 'cloud_download',\n      tooltip: 'DESCARGAR',\n      color: 'accent',\n      action: 'DOWNLOAD',\n    },\n    {\n      icon: 'add',\n      tooltip: 'AGREGAR',\n      color: 'primary',\n      action: 'NEW',\n    },\n  ];\n\n  metaDataColumns: MetaDataColumn[] = [\n    { field: 'id', title: 'ID' },\n    { field: 'nombre', title: 'Nombre' },\n    { field: 'apellido', title: 'Apellido' },\n    { field: 'cmp', title: 'CMP' },\n  ];\n\n  constructor(\n    protected medic: MedicUseCase,\n    protected utilsService: UtilsService\n  ) {\n    super(medic, utilsService);\n  }\n\n  openForm(row: any = null) {\n    const options = {\n      panelClass: 'panel-container',\n      disableClose: true,\n      data: row,\n    };\n    const reference: MatDialogRef<FormComponent> = this.utilsService.showModal(\n      FormComponent,\n      options\n    );\n\n    reference.afterClosed().subscribe((response) => {\n      if (!response) {\n        return;\n      }\n\n      if (response.id) {\n        this.medic.update(response.id, response.medic).subscribe(() => {\n          this.changePage(this.currentPage);\n          this.utilsService.showMessage('Registro actualizado');\n        });\n      } else {\n        this.medic.insert(response.medic).subscribe(() => {\n          this.changePage(this.currentPage);\n          this.utilsService.showMessage('Registro actualizado');\n        });\n      }\n    });\n  }\n\n  doAction(action: string) {\n    switch (action) {\n      case 'DOWNLOAD':\n        const dto = new MedicExportDto();\n        this.medic.list().subscribe((response: MedicModel[]) => {\n          this.utilsService.showBottomSheet(\n            'Lista de médicos',\n            'medicos',\n            response,\n            dto\n          );\n        });\n        break;\n      case 'NEW':\n        this.openForm();\n        break;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "medic",
                        "type": "MedicUseCase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "medic",
                        "type": "MedicUseCase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "PageListComponent-1",
            "templateData": "<aps-title></aps-title>\n<aps-container>\n  <perfect-scrollbar class=\"heightMaxPerfectScrollbar\">\n    <cdev-table [data]=\"data\" [metaDataColumns]=\"metaDataColumns\">\n      <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef></th>\n        <td mat-cell *matCellDef=\"let row\" class=\"align-right\">\n          <button\n            mat-icon-button\n            color=\"primary\"\n            (click)=\"openForm(row)\"\n            matTooltip=\"EDITAR\"\n          >\n            <mat-icon>edit</mat-icon>\n          </button>\n          <button\n            mat-icon-button\n            color=\"accent\"\n            (click)=\"delete(row.id)\"\n            matTooltip=\"ELIMINAR\"\n          >\n            <mat-icon>delete</mat-icon>\n          </button>\n        </td>\n      </ng-container>\n    </cdev-table>\n  </perfect-scrollbar>\n  <aps-paginator\n    (onChangePage)=\"changePage($event)\"\n    [length]=\"totalRecords\"\n    [currentPage]=\"currentPage\"\n  ></aps-paginator>\n</aps-container>\n<aps-keypad\n  [keypadButtons]=\"keypadButtons\"\n  (onClick)=\"doAction($event)\"\n></aps-keypad>\n"
        },
        {
            "name": "PageListComponent",
            "id": "component-PageListComponent-283d0f7c2448d0e2bcd414a4ef537531-2",
            "file": "projects/aps/src/app/users/pages/page-list/page-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "aps-page-list",
            "styleUrls": [
                "./page-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserModel[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "keypadButtons",
                    "defaultValue": "[\n    {\n      icon: 'cloud_download',\n      tooltip: 'DESCARGAR',\n      color: 'accent',\n      action: 'DOWNLOAD',\n    },\n    {\n      icon: 'add',\n      tooltip: 'AGREGAR',\n      color: 'primary',\n      action: 'NEW',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyPadButton[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "metaDataColumns",
                    "defaultValue": "[\n    { field: 'id', title: 'ID' },\n    { field: 'nombre', title: 'Nombre' },\n    { field: 'correo', title: 'Correo' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaDataColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "useCase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "U",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "utilsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UtilsService",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "doAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "openForm",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "verifyExistsDataInPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { UtilsService } from '../../../helpers/services/utils.service';\nimport { BaseComponent } from '../../../shared/classes/baseComponent';\nimport { KeyPadButton } from '../../../shared/interfaces/keybutton.interface';\nimport { MetaDataColumn } from '../../../shared/interfaces/metacolumn.interface';\nimport { UserUseCase } from '../../application/user.usecase';\nimport { FormComponent } from '../../components/form/form.component';\nimport { UserModel } from '../../domain/user.model';\nimport { UserExportDto } from '../../dtos/user-export.dto';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'aps-page-list',\n  templateUrl: './page-list.component.html',\n  styleUrls: ['./page-list.component.css'],\n})\nexport class PageListComponent extends BaseComponent<UserModel, UserUseCase> {\n  data: UserModel[] = [];\n  totalRecords: number = 0;\n  keypadButtons: KeyPadButton[] = [\n    {\n      icon: 'cloud_download',\n      tooltip: 'DESCARGAR',\n      color: 'accent',\n      action: 'DOWNLOAD',\n    },\n    {\n      icon: 'add',\n      tooltip: 'AGREGAR',\n      color: 'primary',\n      action: 'NEW',\n    },\n  ];\n\n  metaDataColumns: MetaDataColumn[] = [\n    { field: 'id', title: 'ID' },\n    { field: 'nombre', title: 'Nombre' },\n    { field: 'correo', title: 'Correo' },\n  ];\n\n  constructor(\n    protected user: UserUseCase,\n    protected utilsService: UtilsService\n  ) {\n    super(user, utilsService);\n  }\n\n  openForm(row: any = null) {\n    const options = {\n      panelClass: 'panel-container',\n      disableClose: true,\n      data: row,\n    };\n    const reference: MatDialogRef<FormComponent> = this.utilsService.showModal(\n      FormComponent,\n      options\n    );\n\n    reference.afterClosed().subscribe((response) => {\n      if (!response) {\n        return;\n      }\n\n      if (response.id) {\n        const user = { ...response };\n        delete user.id;\n        if (!user.password.trim()) {\n          delete user.password;\n        }\n\n        this.user.update(response.id, user).subscribe(() => {\n          this.changePage(this.currentPage);\n          this.utilsService.showMessage('Registro actualizado');\n        });\n      } else {\n        const user = { ...response };\n        delete user.id;\n        this.user.insert(user).subscribe(() => {\n          this.changePage(this.currentPage);\n          this.utilsService.showMessage('Registro actualizado');\n        });\n      }\n    });\n  }\n\n  doAction(action: string) {\n    switch (action) {\n      case 'DOWNLOAD':\n        const dto = new UserExportDto();\n        this.user.list().subscribe((response: UserModel[]) => {\n          this.utilsService.showBottomSheet(\n            'Lista de usuarios',\n            'users',\n            response,\n            dto\n          );\n        });\n        break;\n      case 'NEW':\n        this.openForm();\n        break;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "user",
                        "type": "UserUseCase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "user",
                        "type": "UserUseCase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "PageListComponent-2",
            "templateData": "<aps-title></aps-title>\n<aps-container>\n  <perfect-scrollbar class=\"heightMaxPerfectScrollbar\">\n    <cdev-table [data]=\"data\" [metaDataColumns]=\"metaDataColumns\">\n      <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef></th>\n        <td mat-cell *matCellDef=\"let row\" class=\"align-right\">\n          <button\n            mat-icon-button\n            color=\"primary\"\n            (click)=\"openForm(row)\"\n            matTooltip=\"EDITAR\"\n          >\n            <mat-icon>edit</mat-icon>\n          </button>\n          <button\n            mat-icon-button\n            color=\"accent\"\n            (click)=\"delete(row.id)\"\n            matTooltip=\"ELIMINAR\"\n          >\n            <mat-icon>delete</mat-icon>\n          </button>\n        </td>\n      </ng-container>\n    </cdev-table>\n  </perfect-scrollbar>\n  <aps-paginator\n    (onChangePage)=\"changePage($event)\"\n    [length]=\"totalRecords\"\n    [currentPage]=\"currentPage\"\n  ></aps-paginator>\n</aps-container>\n<aps-keypad\n  [keypadButtons]=\"keypadButtons\"\n  (onClick)=\"doAction($event)\"\n></aps-keypad>\n\n<!-- <aps-container>\n  <perfect-scrollbar class=\"heightMaxPerfectScrollbar\">\n    <cdev-table [data]=\"data\" [metaDataColumns]=\"metaDataColumns\">\n      <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef></th>\n        <td mat-cell *matCellDef=\"let row\" class=\"align-right\">\n          <button\n            mat-icon-button\n            color=\"primary\"\n            (click)=\"openForm(row)\"\n            matTooltip=\"EDITAR\"\n          >\n            <mat-icon>edit</mat-icon>\n          </button>\n          <button\n            mat-icon-button\n            color=\"accent\"\n            (click)=\"delete(row.id, row.username)\"\n            matTooltip=\"ELIMINAR\"\n          >\n            <mat-icon>delete</mat-icon>\n          </button>\n        </td>\n      </ng-container>\n    </cdev-table>\n  </perfect-scrollbar>\n  <aps-paginator\n    (onChangePage)=\"changePage($event)\"\n    [length]=\"totalRecords\"\n    [currentPage]=\"currentPage\"\n  ></aps-paginator>\n</aps-container>\n<aps-keypad\n  [keypadButtons]=\"keypadButtons\"\n  (onClick)=\"doAction($event)\"\n></aps-keypad> -->\n"
        },
        {
            "name": "PageListComponent",
            "id": "component-PageListComponent-9aa06837ffee31c9c00e40c3c83b5251-3",
            "file": "projects/aps/src/app/histories/pages/page-list/page-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "aps-page-list",
            "styleUrls": [
                "./page-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "[\n    { id: 1, patient: 'John', medic: 'Abel' },\n    { id: 2, patient: 'Jane', medic: 'Jorge' },\n    { id: 3, patient: 'Jack', medic: 'Luis' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "metaDataColumns",
                    "defaultValue": "[\n    { field: 'id', title: 'ID' },\n    { field: \"patient\", title: \"Nombre del paciente\" },\n    { field: \"medic\", title: \"Nombre del médico\" },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaDataColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { MetaDataColumn } from '../../../shared/interfaces/metacolumn.interface';\n\n@Component({\n  selector: 'aps-page-list',\n  templateUrl: './page-list.component.html',\n  styleUrls: ['./page-list.component.css'],\n})\nexport class PageListComponent implements OnInit {\n  data: any[] = [\n    { id: 1, patient: 'John', medic: 'Abel' },\n    { id: 2, patient: 'Jane', medic: 'Jorge' },\n    { id: 3, patient: 'Jack', medic: 'Luis' },\n  ];\n\n  metaDataColumns: MetaDataColumn[] = [\n    { field: 'id', title: 'ID' },\n    { field: \"patient\", title: \"Nombre del paciente\" },\n    { field: \"medic\", title: \"Nombre del médico\" },\n  ]\n  // listFields: string[] = ['id', 'patient', 'medic'];\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "PageListComponent-3",
            "templateData": "<aps-title></aps-title>\n<aps-container>\n  <aps-table [data]=\"data\" [metaDataColumns]=\"metaDataColumns\"></aps-table>\n</aps-container>\n"
        },
        {
            "name": "PageLoginComponent",
            "id": "component-PageLoginComponent-98c4f5d27c7f14a0bb04cc41e296c909",
            "file": "projects/aps/src/app/core/pages/page-login/page-login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "aps-page-login",
            "styleUrls": [
                "./page-login.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "auth",
                            "type": "AuthModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "auth",
                            "type": "AuthModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ConfigService } from '../../../config/services/config.service';\nimport { ConfigLayout } from '../../../config/interfaces/config-layout.interface';\nimport { AuthModel } from '../../domain/auth.model';\nimport { AuthUseCase } from '../../application/auth.usecase';\n\n@Component({\n  selector: 'aps-page-login',\n  templateUrl: './page-login.component.html',\n  styleUrls: ['./page-login.component.css'],\n})\nexport class PageLoginComponent implements OnInit {\n  constructor(private config: ConfigService, private authUseCase: AuthUseCase) {\n    this.config.configuration = {\n      header: { hidden: true },\n      menu: { hidden: true },\n    };\n  }\n\n  ngOnInit(): void {}\n\n  ngOnDestroy(): void {\n    this.config.configuration = {\n      header: { hidden: false },\n      menu: { hidden: false },\n    };\n  }\n\n  login(auth: AuthModel) {\n    this.authUseCase.login(auth);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  width: 100vw;\n  height: 100vh;\n  background: url(/assets/img/background.png);\n}\n\n.info {\n  padding-left: 150px;\n}\n\n.info img {\n  max-width: 150px;\n}\n\n.info h2 {\n  color: whitesmoke;\n  font-size: 42px;\n  line-height: 46px;\n  text-align: center;\n}\n\n.info mat-icon {\n  width: 100px;\n  height: 100px;\n}\n\n.login {\n  background: white;\n}\n",
                    "styleUrl": "./page-login.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authUseCase",
                        "type": "AuthUseCase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authUseCase",
                        "type": "AuthUseCase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\n  fxLayout\n  fxLayout.lt-sm=\"column\"\n  class=\"container\"\n  fxLayoutAlign=\"space-between\"\n>\n  <div\n    class=\"info\"\n    fxFlex=\"1 1 30%\"\n    fxLayout=\"column\"\n    fxLayoutAlign=\"center center\"\n  >\n    <mat-icon svgIcon=\"logo\"></mat-icon>\n    <h2>Sistema de Historias</h2>\n  </div>\n\n  <div class=\"login\" fxFlex=\"1 1 30%\" fxLayout fxLayoutAlign=\"center center\">\n    <aps-login (onLogin)=\"login($event)\"></aps-login>\n  </div>\n</div>\n"
        },
        {
            "name": "PageReportsComponent",
            "id": "component-PageReportsComponent-443a40f069287f79faa35229605b2bfa",
            "file": "projects/aps/src/app/dashboard/pages/page-reports/page-reports.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "aps-page-reports",
            "styleUrls": [
                "./page-reports.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-reports.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'aps-page-reports',\n  templateUrl: './page-reports.component.html',\n  styleUrls: ['./page-reports.component.css'],\n})\nexport class PageReportsComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {\n    console.log('Cargando dashboard');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-reports.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout fxLayoutAlign=\"space-around center\">\n  <aps-covid></aps-covid>\n  <aps-socket></aps-socket>\n</div>\n"
        },
        {
            "name": "PaginatorComponent",
            "id": "component-PaginatorComponent-11af768a78227095ed592b514f1c3dce",
            "file": "projects/aps/src/app/shared/components/paginator/paginator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "aps-paginator",
            "styleUrls": [
                "./paginator.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./paginator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "number"
                },
                {
                    "name": "length",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "onChangePage",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "arrayPages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "pageSize",
                    "defaultValue": "environment.PAGE_SIZE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ThisReceiver } from '@angular/compiler';\nimport {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\nimport { environment } from '../../../../environments/environment';\n\n@Component({\n  selector: 'aps-paginator',\n  templateUrl: './paginator.component.html',\n  styleUrls: ['./paginator.component.css'],\n})\nexport class PaginatorComponent implements OnInit {\n  @Output() onChangePage: EventEmitter<number> = new EventEmitter<number>();\n  @Input() length!: number;\n  @Input() currentPage: number = 0;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  pageSize = environment.PAGE_SIZE;\n  arrayPages: number[] = [];\n  // currentPage = 0;\n\n  constructor() {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const quantityPages = Math.ceil(this.length / this.pageSize);\n    this.arrayPages = Array(quantityPages)\n      .fill(0)\n      .map((x, i) => i);\n  }\n\n  ngOnInit(): void {}\n\n  changePage(event: any) {\n    this.currentPage = event.pageIndex ?? event.value;\n    console.log(this.currentPage);\n    this.paginator.pageIndex = this.currentPage;\n    this.onChangePage.emit(this.currentPage);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./paginator.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 25
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout fxLayoutAlign=\"end center\" fxLayoutGap=\"15px\">\n  <mat-paginator\n    [length]=\"length\"\n    [pageSize]=\"pageSize\"\n    (page)=\"changePage($event)\"\n    showFirstLastButtons=\"true\"\n    [pageIndex]=\"currentPage\"\n  >\n  </mat-paginator>\n\n  <mat-select\n    fxFlex=\"1 1 80px\"\n    [(value)]=\"currentPage\"\n    (selectionChange)=\"changePage($event)\"\n  >\n    <mat-option [value]=\"el\" *ngFor=\"let el of arrayPages\"\n      >Página {{ el + 1 }}</mat-option\n    >\n  </mat-select>\n</div>\n"
        },
        {
            "name": "PhotoComponent",
            "id": "component-PhotoComponent-a04b766272b9b216f9bdcd47a796d58c",
            "file": "projects/aps/src/app/shared/components/photo/photo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => PhotoComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "aps-photo",
            "styleUrls": [
                "./photo.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./photo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "photoByDefault",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'file'"
                        }
                    ]
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "isUsingWebCam",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "onChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "onTouched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "photo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'photo'"
                        }
                    ]
                },
                {
                    "name": "statusHover",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "triggerSnapshot",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "capturePhotoFromWeb",
                    "args": [
                        {
                            "name": "webcamImage",
                            "type": "WebcamImage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "webcamImage",
                            "type": "WebcamImage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeOriginPhoto",
                    "args": [
                        {
                            "name": "evt",
                            "type": "MatSlideToggleChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "MatSlideToggleChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "executeLoadImage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fileUpload",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadingPhoto",
                    "args": [
                        {
                            "name": "image",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "image",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectImage",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "takePhoto",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "triggerAsObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ElementRef,\n  forwardRef,\n  Input,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\nimport { WebcamImage } from 'ngx-webcam';\nimport { environment } from 'projects/aps/src/environments/environment';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'aps-photo',\n  templateUrl: './photo.component.html',\n  styleUrls: ['./photo.component.css'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => PhotoComponent),\n      multi: true,\n    },\n  ],\n})\nexport class PhotoComponent implements OnInit, ControlValueAccessor {\n  @ViewChild('photo') photo!: ElementRef;\n  @ViewChild('file') file!: ElementRef;\n  @Input() photoByDefault: string = '';\n  statusHover = false;\n  isUsingWebCam = false;\n  triggerSnapshot = new Subject<void>();\n  value!: File;\n\n  /*   onChange = (_: any) => {};\n  onTouched = () => {}; */\n  onChange: any;\n  onTouched: any;\n\n  isDisabled = false;\n\n  constructor() {}\n\n  writeValue(value: File) {\n    if (value) {\n      this.value = value;\n    }\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean) {\n    this.isDisabled = isDisabled;\n  }\n\n  ngOnInit(): void {}\n\n  fileUpload(file: File) {\n    if (!file.type.startsWith('image')) {\n      return;\n    }\n\n    this.onTouched();\n    this.onChange(file);\n\n    const fr: FileReader = new FileReader();\n    fr.onloadend = (response: any) => {\n      const dataBase64 = response.target.result;\n      this.photo.nativeElement.style.backgroundImage = `url(${dataBase64})`;\n    };\n\n    fr.readAsDataURL(file);\n  }\n\n  selectImage(event: any) {\n    const file: File = event.target.files[0];\n    this.fileUpload(file);\n  }\n\n  executeLoadImage() {\n    this.file.nativeElement.click();\n    return false;\n  }\n\n  changeOriginPhoto(evt: MatSlideToggleChange) {\n    this.isUsingWebCam = !this.isUsingWebCam;\n  }\n\n  capturePhotoFromWeb(webcamImage: WebcamImage) {\n    fetch(webcamImage.imageAsDataUrl)\n      .then((res) => res.arrayBuffer())\n      .then((buffer) => new File([buffer], 'avatar', { type: 'image/jpeg' }))\n      .then((file) => {\n        this.fileUpload(file);\n        this.isUsingWebCam = false;\n      });\n  }\n\n  triggerAsObservable() {\n    return this.triggerSnapshot.asObservable();\n  }\n\n  takePhoto() {\n    this.triggerSnapshot.next();\n  }\n\n  loadingPhoto(image: string) {\n    this.photo.nativeElement.style.backgroundImage = `url(${image})`;\n  }\n\n  ngAfterViewInit() {\n    if (this.photoByDefault) {\n      const path = `${environment.API_URL}/photos/${this.photoByDefault}`;\n      this.loadingPhoto(path);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  width: 100%;\n  height: 207px;\n  border: 1px solid #ccc;\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position-x: center;\n  background-position-y: center;\n  cursor: pointer;\n  text-align: center;\n  line-height: 207px;\n}\n\n.container.hover {\n  border: 1px dashed red;\n}\n\np {\n  font-size: 12px;\n  font-style: italic;\n  text-align: center;\n}\n\ninput[type=\"file\"] {\n  display: none;\n}\n",
                    "styleUrl": "./photo.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 41
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "templateData": "<div\n  *ngIf=\"!isUsingWebCam\"\n  class=\"container\"\n  upload\n  (onHover)=\"statusHover = $event\"\n  (onUpload)=\"fileUpload($event)\"\n  [ngClass]=\"{ hover: statusHover }\"\n  (click)=\"executeLoadImage()\"\n  #photo\n></div>\n<webcam\n  *ngIf=\"isUsingWebCam\"\n  [height]=\"207\"\n  [width]=\"168\"\n  (imageCapture)=\"capturePhotoFromWeb($event)\"\n  [trigger]=\"triggerAsObservable()\"\n  mirrorImage=\"never\"\n></webcam>\n<p *ngIf=\"!isUsingWebCam\">Arrastre una imagen al rectángulo superior</p>\n<div>\n  <mat-slide-toggle\n    color=\"primary\"\n    [checked]=\"isUsingWebCam\"\n    (change)=\"changeOriginPhoto($event)\"\n  >\n    Usar webcam\n  </mat-slide-toggle>\n  <button\n    mat-icon-button\n    color=\"primary\"\n    *ngIf=\"isUsingWebCam\"\n    (click)=\"takePhoto()\"\n    type=\"button\"\n  >\n    <mat-icon>add_a_photo</mat-icon>\n  </button>\n</div>\n<<<<<<< HEAD\n{{ isDisabled }}\n=======\n>>>>>>> 2d6ad3ec710596b3d16fde4279133505898d6398\n\n<input type=\"file\" #file (change)=\"selectImage($event)\" />\n"
        },
        {
            "name": "SocketComponent",
            "id": "component-SocketComponent-5149e5c3be26b3b10b7d3d87bee4a84d",
            "file": "projects/aps/src/app/dashboard/components/socket/socket.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "aps-socket",
            "styleUrls": [
                "./socket.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./socket.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Entity[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "doughnut",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "gradient",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "legend",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "legendPosition",
                    "defaultValue": "['right', 'below']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "legendTitle",
                    "defaultValue": "'Vacunas'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "scheme",
                    "defaultValue": "{\n    domain: ['#5AA454', '#A10A28', '#C7B42C', '#AAAAAA'],\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "view",
                    "defaultValue": "[500, 300]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { SocketUseCase } from '../../application/socket.usecase';\nimport { Entity } from '../../domain/entity';\n\n@Component({\n  selector: 'aps-socket',\n  templateUrl: './socket.component.html',\n  styleUrls: ['./socket.component.css'],\n})\nexport class SocketComponent implements OnInit {\n  data: Entity[] = [];\n  view: [number, number] = [500, 300];\n  scheme = {\n    domain: ['#5AA454', '#A10A28', '#C7B42C', '#AAAAAA'],\n  };\n  legend = true;\n  legendPosition = ['right', 'below'];\n  legendTitle = 'Vacunas';\n  gradient = true;\n  doughnut = true;\n\n  constructor(private socketUseCase: SocketUseCase) {}\n\n  ngOnInit(): void {\n    this.socketUseCase\n      .listen('dataupdate')\n      .subscribe((results: Entity[]) => (this.data = results));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./socket.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socketUseCase",
                        "type": "SocketUseCase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "socketUseCase",
                        "type": "SocketUseCase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ngx-charts-pie-chart\n  [view]=\"view\"\n  [results]=\"data\"\n  [scheme]=\"scheme\"\n  [legend]=\"legend\"\n  [legendTitle]=\"legendTitle\"\n  [gradient]=\"gradient\"\n  [doughnut]=\"doughnut\"\n></ngx-charts-pie-chart>\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-33b98bc965987b8e8e3752d4ca492240",
            "file": "projects/aps/src/app/shared/components/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "aps-table",
            "styleUrls": [
                "./table.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "any"
                },
                {
                    "name": "metaDataColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "MetaDataColumn[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columnsDef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<MatColumnDef>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "MatColumnDef, {descendants: true}"
                        }
                    ]
                },
                {
                    "name": "listFields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTable<any>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatTable, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ContentChildren,\n  Input,\n  OnInit,\n  QueryList,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { MatColumnDef, MatTable } from '@angular/material/table';\nimport { MetaDataColumn } from '../../interfaces/metacolumn.interface';\n\ninterface IData {\n  id: number;\n  name: string;\n}\n\n@Component({\n  selector: 'aps-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.css'],\n})\nexport class TableComponent implements OnInit {\n  @Input() data: any;\n  @Input() metaDataColumns!: MetaDataColumn[];\n  listFields: string[] = [];\n  @ContentChildren(MatColumnDef, { descendants: true })\n  columnsDef!: QueryList<MatColumnDef>;\n  @ViewChild(MatTable, { static: true }) table!: MatTable<any>;\n\n  constructor() {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.metaDataColumns) {\n      this.listFields = this.metaDataColumns.map((x) => x.field);\n    }\n  }\n\n  ngOnInit(): void {}\n\n  ngAfterContentInit() {\n    if (!this.columnsDef) {\n      return;\n    }\n    this.columnsDef.forEach((columnDef) => {\n      this.listFields.push(columnDef.name);\n      this.table?.addColumnDef(columnDef);\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".highline:hover {\n  background-color: rgba(0, 0, 0, 0.1);\n}\n\n.head th {\n  font-size: 20px;\n}\n",
                    "styleUrl": "./table.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 29
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout=\"column\">\n  <ng-content></ng-content>\n  <table mat-table [dataSource]=\"data\">\n    <ng-container\n      [matColumnDef]=\"metadata.field\"\n      *ngFor=\"let metadata of metaDataColumns\"\n    >\n      <th mat-header-cell *matHeaderCellDef>{{ metadata.title }}</th>\n      <td mat-cell *matCellDef=\"let row\">{{ row[metadata.field] }}</td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"listFields; sticky: true\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: listFields\" class=\"highline\"></tr>\n  </table>\n</div>\n"
        },
        {
            "name": "TitleComponent",
            "id": "component-TitleComponent-a29d07ce898e662bfe691b2cb582223e",
            "file": "projects/aps/src/app/shared/components/title/title.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "aps-title",
            "styleUrls": [
                "./title.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./title.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenu",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { IMenu, MenuService } from '../../../helpers/services/menu.service';\n\n@Component({\n  selector: 'aps-title',\n  templateUrl: './title.component.html',\n  styleUrls: ['./title.component.css'],\n})\nexport class TitleComponent implements OnInit {\n  path: IMenu;\n\n  constructor(\n    private menuService: MenuService,\n    private activatedRoute: ActivatedRoute\n  ) {\n    const currentPath =\n      '/' + this.activatedRoute.snapshot.pathFromRoot[1].routeConfig?.path;\n    this.path = this.menuService.getMenuByUrl(currentPath);\n    console.log('path', this.path);\n  }\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-toolbar {\n  background-color: #039be5 !important;\n  height: 80px;\n}\n\nh2 {\n  font-size: 25px;\n  color: white !important;\n  line-height: 80px;\n}\n\nmat-icon {\n  font-size: 34px;\n  width: 34px;\n  height: 34px;\n  color: white;\n}\n",
                    "styleUrl": "./title.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "menuService",
                        "type": "MenuService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "menuService",
                        "type": "MenuService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-toolbar fxLayout fxLayoutGap=\"10px\">\n  <mat-icon [svgIcon]=\"path.icon\"></mat-icon>\n  <h2>{{ path.title }}</h2>\n</mat-toolbar>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-2267e0ebc490979f2289d5c1547e3c8d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/aps/src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\nimport { CoreModule } from './core/core.module';\nimport { AppRoutingModule } from './app-routing.module';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatPaginatorIntl } from '@angular/material/paginator';\nimport { Paginator } from './shared/classes/paginator';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ConfigModule } from './config/modules/config.module';\nimport { configLayout } from './config/constants/config.constant';\nimport { IconService } from './helpers/services/icon.service';\nimport { AuthInfraestructure } from './core/infraestructure/auth.infraestructure';\nimport { AuthRepository } from './core/application/auth.repository';\nimport { AuthUseCase } from './core/application/auth.usecase';\nimport { StorageInfraestructure } from './core/infraestructure/storage.infraestructure';\nimport { StorageRepository } from './core/application/storage.repository';\nimport { MedicInfraestructure } from './medics/infraestructure/medic.infraestructure';\nimport { MedicRepository } from './medics/application/medic.repostiory';\nimport { DriverRepository } from './drivers/application/driver.repository';\nimport { DriverInfraestructure } from './drivers/infraestructure/driver.infraestructure';\nimport { TokenInterceptor } from './shared/interceptors/token.interceptor';\nimport { UserRepository } from './users/application/user.repository';\nimport { UserInfraestructure } from './users/infraestructure/user.infraestructure';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    CoreModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatSidenavModule,\n    MatDialogModule,\n    MatSnackBarModule,\n    MatBottomSheetModule,\n    HttpClientModule,\n    ConfigModule.forRoot(configLayout),\n  ],\n  providers: [\n    { provide: MatPaginatorIntl, useClass: Paginator },\n    { provide: AuthRepository, useClass: AuthInfraestructure },\n    { provide: MedicRepository, useClass: MedicInfraestructure },\n    { provide: DriverRepository, useClass: DriverInfraestructure },\n    { provide: UserRepository, useClass: UserInfraestructure },\n    { provide: StorageRepository, useClass: StorageInfraestructure },\n    { provide: HTTP_INTERCEPTORS, useClass: TokenInterceptor, multi: true },\n    AuthUseCase,\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {\n  constructor(private iconService: IconService) {}\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthUseCase"
                        },
                        {
                            "name": "TokenInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "ConfigModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-a32c4e4c455f94999d18d04a3666ae4b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/aps/src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport {\n  NoPreloading,\n  PreloadAllModules,\n  RouterModule,\n  Routes,\n} from '@angular/router';\nimport { PageLoginComponent } from './core/pages/page-login/page-login.component';\nimport { PageReportsComponent } from './dashboard/pages/page-reports/page-reports.component';\nimport { AuthenticationGuard } from './shared/guards/authentication.guard';\n\nconst routes: Routes = [\n  { path: '', component: PageLoginComponent },\n  {\n    path: 'dashboard',\n    canLoad: [],\n    loadChildren: () =>\n      \"import('./dashboard/dashboard.module').then((m) => m.DashboardModule)\",\n  },\n  {\n    path: 'histories',\n    canLoad: [AuthenticationGuard],\n    loadChildren: () =>\n      \"import('./histories/histories.module').then((m) => m.HistoriesModule)\",\n  },\n  {\n    path: 'medics',\n    canLoad: [AuthenticationGuard],\n    loadChildren: () =>\n      \"import('./medics/medics.module').then((m) => m.MedicsModule)\",\n  },\n  {\n    path: 'drivers',\n    canLoad: [AuthenticationGuard],\n    loadChildren: () =>\n      \"import('./drivers/drivers.module').then((m) => m.DriversModule)\",\n  },\n  {\n    path: 'users',\n    canLoad: [AuthenticationGuard],\n    loadChildren: () =>\n      \"import('./users/users.module').then((m) => m.UsersModule)\",\n  },\n  { path: '**', redirectTo: '' },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, {\n      preloadingStrategy: PreloadAllModules,\n    }),\n  ],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CdevTableModule",
            "id": "module-CdevTableModule-3bf5a7dcfd833bf8e9b20f43995e5c26",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/cdev-table/src/lib/cdev-table.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { MatTableModule } from '@angular/material/table';\nimport { CdevTableComponent } from './cdev-table.component';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\n@NgModule({\n  declarations: [CdevTableComponent],\n  imports: [MatTableModule, CommonModule, FlexLayoutModule],\n  exports: [CdevTableComponent],\n})\nexport class CdevTableModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CdevTableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CdevTableComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ConfigModule",
            "id": "module-ConfigModule-4d24cf07fbace74dcb7a4884f5c1c6d1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/aps/src/app/config/modules/config.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<ConfigModule>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CONFIG_TOKEN } from '../tokens';\n\n@NgModule()\nexport class ConfigModule {\n  static forRoot(config: any): ModuleWithProviders<ConfigModule> {\n    const module = {\n      ngModule: ConfigModule,\n      providers: [\n        {\n          provide: CONFIG_TOKEN,\n          useValue: config,\n        },\n      ],\n    };\n\n    return module;\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-addb82a371c515240e32b7ec41241290",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/aps/src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageLoginComponent } from './pages/page-login/page-login.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatIconModule } from '@angular/material/icon';\nimport { HeaderComponent } from './components/header/header.component';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MenuComponent } from './components/menu/menu.component';\nimport { MatListModule } from '@angular/material/list';\nimport { RouterModule } from '@angular/router';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  RecaptchaModule,\n  RecaptchaFormsModule,\n  RecaptchaSettings,\n  RECAPTCHA_SETTINGS,\n} from 'ng-recaptcha';\nimport { environment } from '../../environments/environment';\n\nconst RECAPTCHA_V2_DUMMY_KEY = environment.keyRecaptcha;\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    FlexLayoutModule,\n    MatIconModule,\n    MatToolbarModule,\n    MatMenuModule,\n    MatListModule,\n    RouterModule,\n    ReactiveFormsModule,\n    RecaptchaModule,\n    RecaptchaFormsModule,\n  ],\n  declarations: [\n    PageLoginComponent,\n    LoginComponent,\n    HeaderComponent,\n    MenuComponent,\n  ],\n  exports: [\n    PageLoginComponent,\n    HeaderComponent,\n    MenuComponent,\n    MatIconModule,\n    FlexLayoutModule,\n  ],\n  providers: [\n    {\n      provide: RECAPTCHA_SETTINGS,\n      useValue: {\n        siteKey: RECAPTCHA_V2_DUMMY_KEY,\n      } as RecaptchaSettings,\n    },\n  ],\n})\nexport class CoreModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "PageLoginComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "PageLoginComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardModule",
            "id": "module-DashboardModule-0bd3c4f024b9a991247f0400e7ea744c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/aps/src/app/dashboard/dashboard.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PageReportsComponent } from './pages/page-reports/page-reports.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\nimport { CovidComponent } from './components/covid/covid.component';\nimport { DashboardRoutingModule } from './dashboard-routing.module';\nimport { CovidUseCase } from './application/covid.usecase';\nimport { CovidRepository } from './application/covid.repository';\nimport { CovidInfraestructure } from './infraestructure/covid.infraestructure';\nimport { SocketComponent } from './components/socket/socket.component';\nimport { SocketRepository } from './application/socket.repository';\nimport { SocketUseCase } from './application/socket.usecase';\nimport { SocketInfraestructure } from './infraestructure/socket.infraestructure';\n\n@NgModule({\n  declarations: [PageReportsComponent, CovidComponent, SocketComponent],\n  imports: [\n    CommonModule,\n    SharedModule,\n    NgxChartsModule,\n    DashboardRoutingModule,\n  ],\n  providers: [\n    CovidUseCase,\n    { provide: CovidRepository, useClass: CovidInfraestructure },\n    SocketUseCase,\n    { provide: SocketRepository, useClass: SocketInfraestructure },\n  ],\n})\nexport class DashboardModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "CovidUseCase"
                        },
                        {
                            "name": "SocketUseCase"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CovidComponent"
                        },
                        {
                            "name": "PageReportsComponent"
                        },
                        {
                            "name": "SocketComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DashboardRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardRoutingModule",
            "id": "module-DashboardRoutingModule-8f14ab2d6622638c4780a21db86043b8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/aps/src/app/dashboard/dashboard-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { PageReportsComponent } from './pages/page-reports/page-reports.component';\n\nconst routes: Routes = [{ path: '', component: PageReportsComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n})\nexport class DashboardRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DriversModule",
            "id": "module-DriversModule-5e29f427a6b5182802f631fc5f5f56fe",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/aps/src/app/drivers/drivers.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DriversRoutingModule } from './drivers-routing.module';\nimport { PageListComponent } from './pages/page-list/page-list.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { FormComponent } from './components/form/form.component';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [PageListComponent, FormComponent],\n  imports: [\n    CommonModule,\n    DriversRoutingModule,\n    SharedModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class DriversModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormComponent"
                        },
                        {
                            "name": "PageListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DriversRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DriversRoutingModule",
            "id": "module-DriversRoutingModule-f9cbbaab55574442eeceb1b51bbff480",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/aps/src/app/drivers/drivers-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PageListComponent } from './pages/page-list/page-list.component';\n\nconst routes: Routes = [{ path: '', component: PageListComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class DriversRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HistoriesModule",
            "id": "module-HistoriesModule-5b88344e219c6bed17f51f4b30d6fc84",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/aps/src/app/histories/histories.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HistoriesRoutingModule } from './histories-routing.module';\nimport { PageListComponent } from './pages/page-list/page-list.component';\nimport { SharedModule } from '../shared/shared.module';\n\n@NgModule({\n  declarations: [PageListComponent],\n  imports: [CommonModule, HistoriesRoutingModule, SharedModule],\n})\nexport class HistoriesModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HistoriesRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HistoriesRoutingModule",
            "id": "module-HistoriesRoutingModule-0d3c7fbc6d1ccbf073276ef97d4bdbbf",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/aps/src/app/histories/histories-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PageListComponent } from './pages/page-list/page-list.component';\n\nconst routes: Routes = [{ path: '', component: PageListComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class HistoriesRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MedicsModule",
            "id": "module-MedicsModule-d44f50dc31eaff9d8bb7fe103d40a96e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/aps/src/app/medics/medics.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MedicsRoutingModule } from './medics-routing.module';\nimport { PageListComponent } from './pages/page-list/page-list.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { FormComponent } from './components/form/form.component';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [PageListComponent, FormComponent],\n  imports: [\n    CommonModule,\n    MedicsRoutingModule,\n    SharedModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class MedicsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MedicsRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MedicsRoutingModule",
            "id": "module-MedicsRoutingModule-5653bd27138254645e1d63bf0bb6a2e8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/aps/src/app/medics/medics-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthorizationGuard } from '../shared/guards/authorization.guard';\nimport { PageListComponent } from './pages/page-list/page-list.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PageListComponent,\n    canActivate: [AuthorizationGuard],\n    data: { rolesAllowed: ['MEDIC', 'OPERATOR'] },\n  },\n];\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class MedicsRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-c26a0e61141f3b558ecc6fc14a077b6f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/aps/src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ContainerComponent } from './components/container/container.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatCardModule } from '@angular/material/card';\nimport { TableComponent } from './components/table/table.component';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport {\n  PerfectScrollbarConfigInterface,\n  PerfectScrollbarModule,\n  PERFECT_SCROLLBAR_CONFIG,\n} from 'ngx-perfect-scrollbar';\nimport { PaginatorComponent } from './components/paginator/paginator.component';\nimport { KeypadComponent } from './components/keypad/keypad.component';\nimport { ConfirmComponent } from './components/confirm/confirm.component';\nimport { DownloadComponent } from './components/download/download.component';\nimport { MatListModule } from '@angular/material/list';\nimport { CdevTableModule } from 'cdev-table';\nimport { TitleComponent } from './components/title/title.component';\nimport { RolesAllowedDirective } from './directives/roles-allowed.directive';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { PhotoComponent } from './components/photo/photo.component';\nimport { UploadDirective } from './directives/upload.directive';\nimport { WebcamModule } from 'ngx-webcam';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\n\nconst DEFAULT_PERFECT_SCROLLBAR_CONFIG: PerfectScrollbarConfigInterface = {\n  suppressScrollX: true,\n};\n\n@NgModule({\n  declarations: [\n    TitleComponent,\n    ContainerComponent,\n    TableComponent,\n    PaginatorComponent,\n    KeypadComponent,\n    ConfirmComponent,\n    DownloadComponent,\n    RolesAllowedDirective,\n    PhotoComponent,\n    UploadDirective,\n  ],\n  imports: [\n    WebcamModule,\n    CommonModule,\n    MatToolbarModule,\n    MatIconModule,\n    FlexLayoutModule,\n    MatCardModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatTooltipModule,\n    MatDialogModule,\n    MatListModule,\n    MatSlideToggleModule,\n  ],\n  exports: [\n    TitleComponent,\n    ContainerComponent,\n    TableComponent,\n    PerfectScrollbarModule,\n    PaginatorComponent,\n    MatIconModule,\n    MatTableModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatTooltipModule,\n    KeypadComponent,\n    ConfirmComponent,\n    MatDialogModule,\n    CdevTableModule,\n    RolesAllowedDirective,\n    MatFormFieldModule,\n    MatInputModule,\n    FlexLayoutModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatSelectModule,\n    PhotoComponent,\n  ],\n  providers: [\n    {\n      provide: PERFECT_SCROLLBAR_CONFIG,\n      useValue: DEFAULT_PERFECT_SCROLLBAR_CONFIG,\n    },\n  ],\n})\nexport class SharedModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConfirmComponent"
                        },
                        {
                            "name": "ContainerComponent"
                        },
                        {
                            "name": "DownloadComponent"
                        },
                        {
                            "name": "KeypadComponent"
                        },
                        {
                            "name": "PaginatorComponent"
                        },
                        {
                            "name": "PhotoComponent"
                        },
                        {
                            "name": "RolesAllowedDirective"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TitleComponent"
                        },
                        {
                            "name": "UploadDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CdevTableModule"
                        },
                        {
                            "name": "ConfirmComponent"
                        },
                        {
                            "name": "ContainerComponent"
                        },
                        {
                            "name": "KeypadComponent"
                        },
                        {
                            "name": "PaginatorComponent"
                        },
                        {
                            "name": "PhotoComponent"
                        },
                        {
                            "name": "RolesAllowedDirective"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TitleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UsersModule",
            "id": "module-UsersModule-e39c85bb34f1b72c58b0c564089d7390",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/aps/src/app/users/users.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { UsersRoutingModule } from './users-routing.module';\nimport { PageListComponent } from './pages/page-list/page-list.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { FormComponent } from './components/form/form.component';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [PageListComponent, FormComponent],\n  imports: [\n    CommonModule,\n    UsersRoutingModule,\n    SharedModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class UsersModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "UsersRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UsersRoutingModule",
            "id": "module-UsersRoutingModule-733565a5c1dff0505f81f2690ca54510",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/aps/src/app/users/users-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PageListComponent } from './pages/page-list/page-list.component';\n\nconst routes: Routes = [{ path: '', component: PageListComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class UsersRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "CONFIG_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/aps/src/app/config/tokens/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken('tokenLayout')"
            },
            {
                "name": "configLayout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/aps/src/app/config/constants/config.constant.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ConfigLayout",
                "defaultValue": "{\n  header: {\n    hidden: false,\n  },\n  menu: {\n    hidden: false,\n  },\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/aps/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/cdev-table/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DEFAULT_PERFECT_SCROLLBAR_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/aps/src/app/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PerfectScrollbarConfigInterface",
                "defaultValue": "{\n  suppressScrollX: true,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/aps/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  PAGE_SIZE: 10,\n  API_URL: 'https://api-cursoangular.cursos-dev.com',\n  keyRecaptcha: '6LcqVe8cAAAAAFKrdDeUow8MCAXl4XGMsm7XbS-T',\n  API_COVID: 'https://covid19.mathdro.id/api/confirmed',\n  SOCKET_URL: 'https://p7inv.sse.codesandbox.io/',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/aps/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  PAGE_SIZE: 10,\n  API_URL: 'https://api-cursoangular.cursos-dev.com',\n  keyRecaptcha: '6LcqVe8cAAAAAFKrdDeUow8MCAXl4XGMsm7XbS-T',\n  API_COVID: '/api/confirmed',\n  SOCKET_URL: 'https://p7inv.sse.codesandbox.io/',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/aps/src/environments/environment.qas.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  PAGE_SIZE: 10,\n  API_URL: 'https://api-cursoangular.cursos-dev.com',\n  keyRecaptcha: '6LcqVe8cAAAAAFKrdDeUow8MCAXl4XGMsm7XbS-T',\n  API_COVID: 'https://covid19.mathdro.id/api/confirmed',\n  SOCKET_URL: 'https://p7inv.sse.codesandbox.io/',\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "pdfFonts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/aps/src/app/shared/components/download/download.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('pdfmake/build/vfs_fonts.js')"
            },
            {
                "name": "pdfMake",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/aps/src/app/shared/components/download/download.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('pdfmake/build/pdfmake.js')"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "RECAPTCHA_V2_DUMMY_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/aps/src/app/core/core.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "environment.keyRecaptcha"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/aps/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/cdev-table/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/aps/src/app/shared/components/download/download.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ShowData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ShowMessage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Confirm.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Confirm.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ConfirmComponent>",
                "defaultValue": "(args: ConfirmComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TableComponent>",
                "defaultValue": "(args: TableComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "MedicUserType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "MedicModel | UserModel",
                "file": "projects/aps/src/app/shared/types/medic-user.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/aps/src/app/config/tokens/index.ts": [
                {
                    "name": "CONFIG_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/aps/src/app/config/tokens/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken('tokenLayout')"
                }
            ],
            "projects/aps/src/app/config/constants/config.constant.ts": [
                {
                    "name": "configLayout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/aps/src/app/config/constants/config.constant.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfigLayout",
                    "defaultValue": "{\n  header: {\n    hidden: false,\n  },\n  menu: {\n    hidden: false,\n  },\n}"
                }
            ],
            "projects/aps/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/aps/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/aps/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/cdev-table/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/cdev-table/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/cdev-table/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/aps/src/app/shared/shared.module.ts": [
                {
                    "name": "DEFAULT_PERFECT_SCROLLBAR_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/aps/src/app/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PerfectScrollbarConfigInterface",
                    "defaultValue": "{\n  suppressScrollX: true,\n}"
                }
            ],
            "projects/aps/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/aps/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  PAGE_SIZE: 10,\n  API_URL: 'https://api-cursoangular.cursos-dev.com',\n  keyRecaptcha: '6LcqVe8cAAAAAFKrdDeUow8MCAXl4XGMsm7XbS-T',\n  API_COVID: 'https://covid19.mathdro.id/api/confirmed',\n  SOCKET_URL: 'https://p7inv.sse.codesandbox.io/',\n}"
                }
            ],
            "projects/aps/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/aps/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  PAGE_SIZE: 10,\n  API_URL: 'https://api-cursoangular.cursos-dev.com',\n  keyRecaptcha: '6LcqVe8cAAAAAFKrdDeUow8MCAXl4XGMsm7XbS-T',\n  API_COVID: '/api/confirmed',\n  SOCKET_URL: 'https://p7inv.sse.codesandbox.io/',\n}"
                }
            ],
            "projects/aps/src/environments/environment.qas.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/aps/src/environments/environment.qas.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  PAGE_SIZE: 10,\n  API_URL: 'https://api-cursoangular.cursos-dev.com',\n  keyRecaptcha: '6LcqVe8cAAAAAFKrdDeUow8MCAXl4XGMsm7XbS-T',\n  API_COVID: 'https://covid19.mathdro.id/api/confirmed',\n  SOCKET_URL: 'https://p7inv.sse.codesandbox.io/',\n}"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "projects/aps/src/app/shared/components/download/download.component.ts": [
                {
                    "name": "pdfFonts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/aps/src/app/shared/components/download/download.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('pdfmake/build/vfs_fonts.js')"
                },
                {
                    "name": "pdfMake",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/aps/src/app/shared/components/download/download.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('pdfmake/build/pdfmake.js')"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/aps/src/app/shared/components/download/download.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ],
            "projects/aps/src/app/core/core.module.ts": [
                {
                    "name": "RECAPTCHA_V2_DUMMY_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/aps/src/app/core/core.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "environment.keyRecaptcha"
                }
            ],
            "stories/Table.stories.ts": [
                {
                    "name": "ShowData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TableComponent>",
                    "defaultValue": "(args: TableComponent) => ({\n  props: args,\n})"
                }
            ],
            "stories/Confirm.stories.ts": [
                {
                    "name": "ShowMessage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Confirm.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Confirm.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ConfirmComponent>",
                    "defaultValue": "(args: ConfirmComponent) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/aps/src/app/shared/types/medic-user.type.ts": [
                {
                    "name": "MedicUserType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "MedicModel | UserModel",
                    "file": "projects/aps/src/app/shared/types/medic-user.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "projects/aps/src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "PageLoginComponent"
                    },
                    {
                        "path": "dashboard",
                        "canLoad": [],
                        "loadChildren": "./dashboard/dashboard.module#DashboardModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "projects/aps/src/app/dashboard/dashboard-routing.module.ts",
                                        "module": "DashboardRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "PageReportsComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "DashboardModule"
                            }
                        ]
                    },
                    {
                        "path": "histories",
                        "canLoad": [
                            "AuthenticationGuard"
                        ],
                        "loadChildren": "./histories/histories.module#HistoriesModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "projects/aps/src/app/histories/histories-routing.module.ts",
                                        "module": "HistoriesRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "PageListComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "HistoriesModule"
                            }
                        ]
                    },
                    {
                        "path": "medics",
                        "canLoad": [
                            "AuthenticationGuard"
                        ],
                        "loadChildren": "./medics/medics.module#MedicsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "projects/aps/src/app/medics/medics-routing.module.ts",
                                        "module": "MedicsRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "PageListComponent",
                                                "canActivate": [
                                                    "AuthorizationGuard"
                                                ],
                                                "data": {
                                                    "rolesAllowed": [
                                                        "MEDIC",
                                                        "OPERATOR"
                                                    ]
                                                }
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "MedicsModule"
                            }
                        ]
                    },
                    {
                        "path": "drivers",
                        "canLoad": [
                            "AuthenticationGuard"
                        ],
                        "loadChildren": "./drivers/drivers.module#DriversModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "projects/aps/src/app/drivers/drivers-routing.module.ts",
                                        "module": "DriversRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "PageListComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "DriversModule"
                            }
                        ]
                    },
                    {
                        "path": "users",
                        "canLoad": [
                            "AuthenticationGuard"
                        ],
                        "loadChildren": "./users/users.module#UsersModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "projects/aps/src/app/users/users-routing.module.ts",
                                        "module": "UsersRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "PageListComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "UsersModule"
                            }
                        ]
                    },
                    {
                        "path": "**",
                        "redirectTo": ""
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/aps/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/config/constants/config.constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configLayout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/config/interfaces/config-layout.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfigLayout",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/config/services/config.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConfigService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/config/tokens/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CONFIG_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/core/application/auth.repository.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuthRepository",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/core/application/auth.usecase.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthUseCase",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/core/application/storage.repository.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StorageRepository",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/core/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/core/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/core/components/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/core/core.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RECAPTCHA_V2_DUMMY_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/core/domain/auth.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/core/infraestructure/auth.infraestructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthInfraestructure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/core/infraestructure/storage.infraestructure.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StorageInfraestructure",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/core/infraestructure/storage.infraestructure.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPayload",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/core/pages/page-login/page-login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageLoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/dashboard/application/covid.repository.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CovidRepository",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/dashboard/application/covid.usecase.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CovidUseCase",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/dashboard/application/socket.repository.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SocketRepository",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/dashboard/application/socket.usecase.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SocketUseCase",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/dashboard/components/covid/covid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CovidComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/dashboard/components/socket/socket.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SocketComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/dashboard/domain/covid.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CovidModel",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/dashboard/domain/entity.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Entity",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/dashboard/infraestructure/covid.infraestructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CovidInfraestructure",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/dashboard/infraestructure/socket.infraestructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SocketInfraestructure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/dashboard/pages/page-reports/page-reports.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageReportsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/drivers/application/driver.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DriverInterface",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/drivers/application/driver.repository.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DriverRepository",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/drivers/application/driver.usecase.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DriverUseCase",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/drivers/components/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/drivers/domain/driver.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DriverModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/drivers/dtos/driver-export.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DriverExportDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/drivers/dtos/driver-export.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDtoExportDriver",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/drivers/infraestructure/driver.infraestructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DriverInfraestructure",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/drivers/pages/page-list/page-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/helpers/interfaces/tokens.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Tokens",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/helpers/services/icon.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IconService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/helpers/services/icon.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IIcon",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/helpers/services/menu.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MenuService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/helpers/services/menu.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMenu",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/helpers/services/utils.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UtilsService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/histories/domain/history.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HistoryModel",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/histories/pages/page-list/page-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/medics/application/medic.repostiory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MedicRepository",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/medics/application/medic.usecase.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MedicUseCase",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/medics/components/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/medics/domain/medic.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MedicModel",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/medics/dtos/medic-export.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MedicExportDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/medics/dtos/medic-export.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDtoExportMedic",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/medics/infraestructure/medic.infraestructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MedicInfraestructure",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/medics/pages/page-list/page-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/classes/baseComponent.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/classes/paginator.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "Paginator",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/components/confirm/confirm.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/components/container/container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/components/download/download.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DownloadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/components/download/download.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pdfFonts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/components/download/download.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pdfMake",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/components/download/download.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/components/keypad/keypad.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KeypadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/components/paginator/paginator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/components/photo/photo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PhotoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/components/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/components/table/table.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/components/title/title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/directives/roles-allowed.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "RolesAllowedDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/directives/upload.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "UploadDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/guards/authentication.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthenticationGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/guards/authorization.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthorizationGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/interceptors/token.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "TokenInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/interfaces/dto-export.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DtoExport",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/interfaces/keybutton.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "KeyPadButton",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/interfaces/metacolumn.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MetaDataColumn",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/interfaces/option-export.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OptionsExport",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/interfaces/page.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Page",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/interfaces/usecase.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UseCase",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_PERFECT_SCROLLBAR_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/users/application/user.repository.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserRepository",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/users/application/user.usecase.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserUseCase",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/users/components/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/users/domain/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserModel",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/users/dtos/user-export.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserExportDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/users/dtos/user-export.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDtoExportUser",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/users/infraestructure/user.infraestructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserInfraestructure",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/app/users/pages/page-list/page-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/environments/environment.qas.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/aps/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/cdev-table/src/lib/cdev-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CdevTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/cdev-table/src/lib/metacolumn.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MetaDataColumn",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/cdev-table/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/cdev-table/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Confirm.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ShowMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Confirm.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ShowData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}